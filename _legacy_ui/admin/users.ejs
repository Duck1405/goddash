<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
    <!-- Inter font -->
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  
  <body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
      <%- include('../components/navigation') %>
      <div class="md:pl-48 flex flex-col flex-1 h-screen">
        <main class="flex-1 pb-32">
          <div class="py-6">
            <% /* Skeleton loader, lasts about 0.3s to let the page content load */ %>
            <%- include('../components/skeleton') %>
            <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
              <!-- Content -->
              <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                <div class="min-w-0 flex-1">
                  <div class="flex">
                    <div class="relative">
                      <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                          <path fill-rule="evenodd" d="M8.25 6.75a3.75 3.75 0 117.5 0 3.75 3.75 0 01-7.5 0zM15.75 9.75a3 3 0 116 0 3 3 0 01-6 0zM2.25 9.75a3 3 0 116 0 3 3 0 01-6 0zM6.31 15.117A6.745 6.745 0 0112 12a6.745 6.745 0 016.709 7.498.75.75 0 01-.372.568A12.696 12.696 0 0112 21.75c-2.305 0-4.47-.612-6.337-1.684a.75.75 0 01-.372-.568 6.787 6.787 0 011.019-4.38z" clip-rule="evenodd" />
                          <path d="M5.082 14.254a8.287 8.287 0 00-1.308 5.135 9.687 9.687 0 01-1.764-.44l-.115-.04a.563.563 0 01-.373-.487l-.01-.121a3.75 3.75 0 013.57-4.047zM20.226 19.389a8.287 8.287 0 00-1.308-5.135 3.75 3.75 0 013.57 4.047l-.01.121a.563.563 0 01-.373.486l-.115.04c-.567.2-1.156.349-1.764.441z" />
                        </svg>
                      </div>
                    </div>
                    <div class="relative ml-4">
                      <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Users</h2>
                      <p class="text-xs font-thin text-gray-500">Manage user accounts on the panel.</p>
                    </div>
                  </div>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <button onclick="showCreateModal()" class="transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-8 py-2 text-sm font-medium text-white hover:bg-[#000000]/80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#0e9825]">
                    Create User
                  </button>
                </div>
              </div>
  
              <% if (req.query.err && req.query.err !== "none") { %>
              <div class="rounded-lg bg-white shadow-sm p-8 mb-5">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 text-gray-400">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-md font-medium tracking-tight text-gray-700">An error was encountered</h3>
                    <div class="mt-1 text-sm text-gray-500">
                      <p>Error code: <code><%= req.query.err %></code></p>
                    </div>
                  </div>
                </div>
              </div>
              <% } %>
  
              <!-- Users List -->
              <div class="card mt-10">
                <div class="card-body">
                  <div class="mb-6 flex justify-between items-center">
                    <h1 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Users</h1>
                    <div class="flex space-x-4 items-center">
                      <input type="text" id="search" placeholder="Search users..." class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl placeholder:text-gray-400 text-gray-600">
                      <select id="perPage" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                        <option value="10">10 per page</option>
                        <option value="25">25 per page</option>
                        <option value="50">50 per page</option>
                        <option value="100">100 per page</option>
                      </select>
                    </div>
                  </div>
                  <div class="overflow-x-auto">
                    <table class="min-w-full divide-y bg-gray-50 rounded-t-lg divide-gray-200">
                      <thead>
                        <tr>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Servers</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User Info</th>
                          <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody id="users-table" class="bg-gray-50 divide-y divide-gray-200">
                        <!-- Users will be loaded here -->
                      </tbody>
                    </table>
                    <div id="pagination" class="flex justify-between items-center mt-4">
                      <div class="text-sm text-gray-500" id="pagination-info"></div>
                      <div class="flex space-x-2" id="pagination-buttons"></div>
                    </div>
                  </div>
                </div>
              </div>
  
              <script>
                let allUsers = [];
                let currentPage = 1;
                let searchTerm = '';
                
                // Load users when page loads
                document.addEventListener('DOMContentLoaded', () => {
                  loadUsers();
                  setupEventListeners();
                  document.getElementById('content').classList.remove('hidden');
                });
  
                function setupEventListeners() {
                  // Search input
                  let timeout;
                  document.getElementById('search').addEventListener('input', (e) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                      searchTerm = e.target.value.toLowerCase();
                      currentPage = 1;
                      displayUsers();
                    }, 300);
                  });
  
                  // Per page select
                  document.getElementById('perPage').addEventListener('change', () => {
                    currentPage = 1;
                    displayUsers();
                  });
                }
  
                async function loadUsers() {
                  try {
                    const response = await fetch('/api/users?per_page=10000');
                    const data = await response.json();
                    allUsers = data.data;
                    displayUsers();
                  } catch (error) {
                    console.error('Error loading users:', error);
                  }
                }

async function fetchDashboardData(username) {
  try {
    // Fetch coins
    const coinsResponse = await fetch(`/usercoinsinfo?id=${username}`);
    const coins = await coinsResponse.json();
    
    // Update coins display
    const coinsElement = document.getElementById(`coins-${username}`);
    if (coinsElement) {
      coinsElement.textContent = `${coins || 0} coins`;
    }
    
    // Fetch user resources
    const resourcesResponse = await fetch(`/userinfo?id=${username}`);
    const resourcesData = await resourcesResponse.json();
    
    // Update resources display
    const resourcesElement = document.getElementById(`resources-${username}`);
    if (resourcesElement && resourcesData.status === "success") {
      const resources = resourcesData.extra || { ram: 0, disk: 0, cpu: 0, servers: 0 };
      resourcesElement.innerHTML = `
        ${resources.ram/1024} GiB memory, ${resources.disk/1024} GiB storage, ${resources.cpu}% CPU, ${resources.servers} servers
      `;
    }
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
  }
}
  
                function displayUsers() {
                  const perPage = parseInt(document.getElementById('perPage').value);
                  
                  // Filter users based on search
                  let filteredUsers = allUsers;
                  if (searchTerm) {
                    filteredUsers = allUsers.filter(user => 
                      user.attributes.username.toLowerCase().includes(searchTerm) ||
                      user.attributes.email.toLowerCase().includes(searchTerm) ||
                      user.attributes.first_name.toLowerCase().includes(searchTerm) ||
                      user.attributes.last_name.toLowerCase().includes(searchTerm)
                    );
                  }
  
                  // Calculate pagination
                  const totalPages = Math.ceil(filteredUsers.length / perPage);
                  const start = (currentPage - 1) * perPage;
                  const end = start + perPage;
                  const paginatedUsers = filteredUsers.slice(start, end);
  
                  // Update table
                  const tableBody = document.getElementById('users-table');
                  tableBody.innerHTML = '';
  
                  paginatedUsers.forEach(user => {
  const tr = document.createElement('tr');
  tr.innerHTML = `
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="flex items-center">
        <div>
          <div class="text-sm font-medium text-gray-900 flex items-center gap-2">
            ${user.attributes.username}
            ${user.attributes.last_name === '#0' ? 
              `<span class="inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-700">
                Prism user
               </span>` 
              : ''}
          </div>
          <div class="text-sm text-gray-500">${user.attributes.first_name} ${(user.attributes.last_name).replace('#0', '')}</div>
        </div>
      </div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="text-sm text-gray-900">${user.attributes.email}</div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="text-sm text-gray-900">${user.attributes.relationships?.servers?.data?.length || 0}</div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="text-sm" id="coins-${user.attributes.username}">-</div>
      <div class="text-sm" id="resources-${user.attributes.username}">-</div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap text-center">
      <button onclick="editUser('${user.attributes.id}', '${user.attributes.username}')" class="text-gray-600 hover:text-gray-900 mx-1">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
          <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
        </svg>
      </button>
      <button onclick="deleteUser('${user.attributes.id}')" class="text-red-600 hover:text-red-900 mx-1">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
      </button>
    </td>
  `;
  tableBody.appendChild(tr);

  // Fetch dashboard data for each user
  fetchDashboardData(user.attributes.username);
});
  
                  // Update pagination info
                  document.getElementById('pagination-info').textContent = 
                    `Showing ${start + 1} to ${Math.min(end, filteredUsers.length)} of ${filteredUsers.length} users`;
  
                  // Update pagination buttons
                  const paginationButtons = document.getElementById('pagination-buttons');
                  paginationButtons.innerHTML = '';
  
                  // Previous button
                  if (currentPage > 1) {
                    const prevButton = document.createElement('button');
                    prevButton.className = 'transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300';
                    prevButton.textContent = 'Previous';
                    prevButton.onclick = () => {
                      currentPage--;
                      displayUsers();
                    };
                    paginationButtons.appendChild(prevButton);
                  }
  
                  // Page numbers
                  for (let i = 1; i <= totalPages; i++) {
                    if (
                      i === 1 || 
                      i === totalPages || 
                      (i >= currentPage - 2 && i <= currentPage + 2)
                    ) {
                      const button = document.createElement('button');
                      button.className = `transition rounded-xl px-4 py-2 text-sm font-medium ${
                        i === currentPage 
                        ? 'bg-gray-800 text-white' 
                        : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                    }`;
                    button.textContent = i;
                    button.onclick = () => {
                      currentPage = i;
                      displayUsers();
                    };
                    paginationButtons.appendChild(button);
                  } else if (
                    (i === 2 && currentPage > 4) ||
                    (i === totalPages - 1 && currentPage < totalPages - 3)
                  ) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-3 py-2 text-gray-500';
                    ellipsis.textContent = '...';
                    paginationButtons.appendChild(ellipsis);
                  }
                }

                // Next button
                if (currentPage < totalPages) {
                  const nextButton = document.createElement('button');
                  nextButton.className = 'transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300';
                  nextButton.textContent = 'Next';
                  nextButton.onclick = () => {
                    currentPage++;
                    displayUsers();
                  };
                  paginationButtons.appendChild(nextButton);
                }
              }

              function showModal(content) {
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                modal.innerHTML = `
                  <div class="relative top-20 mx-auto p-5 w-96 max-w-[90%] opacity-0 transform -translate-y-4 transition-all duration-300">
                    <div class="relative bg-white rounded-2xl shadow-xl p-8">
                      ${content}
                    </div>
                  </div>
                `;
                document.body.appendChild(modal);
                
                // Trigger animation
                setTimeout(() => {
                  modal.querySelector('div').classList.remove('opacity-0', '-translate-y-4');
                }, 10);

                // Close on background click
                modal.addEventListener('click', (e) => {
                  if (e.target === modal) {
                    closeModal(modal);
                  }
                });
              }

              function closeModal(modal) {
                const modalContent = modal.querySelector('div');
                modalContent.classList.add('opacity-0', '-translate-y-4');
                setTimeout(() => {
                  modal.remove();
                }, 300);
              }

              function showCreateModal() {
                const content = `
                  <h2 class="text-xl font-semibold text-gray-700 mb-6">Create User</h2>
                  <div class="space-y-4">
                    <div>
                      <label class="text-sm font-medium text-gray-600">Email</label>
                      <input type="email" id="email" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
                    </div>
                    <div>
                      <label class="text-sm font-medium text-gray-600">Username</label>
                      <input type="text" id="username" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
                    </div>
                    <div>
                      <label class="text-sm font-medium text-gray-600">First Name</label>
                      <input type="text" id="firstname" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
                    </div>
                    <div>
                      <label class="text-sm font-medium text-gray-600">Last Name</label>
                      <input type="text" id="lastname" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
                    </div>
                    <div>
                      <label class="text-sm font-medium text-gray-600">Password</label>
                      <input type="password" id="password" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
                    </div>
                  </div>
                  <div class="mt-6 flex justify-end space-x-3">
                    <button onclick="closeModal(this.closest('.fixed'))" class="transition rounded-2xl bg-gray-100 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-200">
                      Cancel
                    </button>
                    <button onclick="createUser()" class="transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-6 py-2 text-sm font-medium text-white hover:bg-[#000000]/80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#0e9825]">
                      Create User
                    </button>
                  </div>
                `;
                showModal(content);
              }

              async function createUser() {
                const userData = {
                  email: document.getElementById('email').value,
                  username: document.getElementById('username').value,
                  first_name: document.getElementById('firstname').value,
                  last_name: document.getElementById('lastname').value,
                  password: document.getElementById('password').value
                };

                try {
                  const response = await fetch('/api/users', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(userData)
                  });

                  if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Unknown error');
                  }

                  // Get the modal element before closing it
                  const modalElement = document.querySelector('.fixed');
                  if (modalElement) {
                    closeModal(modalElement);
                  }

                  // Reload users list
                  await loadUsers();
                } catch (error) {
                  console.error('Error creating user:', error);
                  alert('Error creating user: ' + error.message);
                }
              }

              function editUser(userId, username) {
  fetch(`/api/users/${userId}`)
    .then(response => response.json())
    .then(async user => {
      // Fetch dashboard data first
      const resourcesResponse = await fetch(`/userinfo?id=${username}`);
      const resourcesData = await resourcesResponse.json();
      const coinsResponse = await fetch(`/usercoinsinfo?id=${username}`);
      const coins = await coinsResponse.json();
      
      const content = `
        <h2 class="text-xl font-semibold text-gray-700 mb-6">Edit User</h2>
        <div class="space-y-4">
          <div>
            <label class="text-sm font-medium text-gray-600">Email</label>
            <input type="email" id="edit-email" value="${user.attributes.email}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Username</label>
            <input type="text" id="edit-username" value="${user.attributes.username}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">First Name</label>
            <input type="text" id="edit-firstname" value="${user.attributes.first_name}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Last Name</label>
            <input type="text" id="edit-lastname" value="${user.attributes.last_name}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Coins</label>
            <input type="number" id="edit-coins" value="${coins || 0}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">RAM (MB)</label>
            <input type="number" id="edit-ram" value="${resourcesData.extra?.ram || 0}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Disk (MB)</label>
            <input type="number" id="edit-disk" value="${resourcesData.extra?.disk || 0}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">CPU (%)</label>
            <input type="number" id="edit-cpu" value="${resourcesData.extra?.cpu || 0}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Servers</label>
            <input type="number" id="edit-servers" value="${resourcesData.extra?.servers || 0}" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">New Password (optional)</label>
            <input type="password" id="edit-password" class="mt-2 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-full text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600">
          </div>
        </div>
        <div class="mt-6 flex justify-end space-x-3">
          <button onclick="closeModal(this.closest('.fixed'))" class="transition rounded-2xl bg-gray-100 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-200">
            Cancel
          </button>
          <button onclick="updateUserWithResources('${userId}', '${username}')" class="transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-6 py-2 text-sm font-medium text-white hover:bg-[#000000]/80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#0e9825]">
            Save Changes
          </button>
        </div>
      `;
      showModal(content);
    })
    .catch(error => {
      console.error('Error loading user:', error);
      alert('Error loading user: ' + error.message);
    });
}

async function updateUserWithResources(userId, username) {
  const userData = {
    email: document.getElementById('edit-email').value,
    username: document.getElementById('edit-username').value,
    first_name: document.getElementById('edit-firstname').value,
    last_name: document.getElementById('edit-lastname').value,
  };

  const password = document.getElementById('edit-password').value;
  if (password) {
    userData.password = password;
  }

  try {
    // Update user info
    const response = await fetch(`/api/users/${userId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Unknown error');
    }

    // Update coins
    const coins = document.getElementById('edit-coins').value;
    await fetch(`/setcoins?id=${username}&coins=${coins}`);

    // Update resources
    const resources = {
      ram: document.getElementById('edit-ram').value,
      disk: document.getElementById('edit-disk').value,
      cpu: document.getElementById('edit-cpu').value,
      servers: document.getElementById('edit-servers').value
    };
    
    await fetch(`/setresources?id=${username}&ram=${resources.ram}&disk=${resources.disk}&cpu=${resources.cpu}&servers=${resources.servers}`);

    window.location.reload();
  } catch (error) {
    console.error('Error updating user:', error);
    alert('Error updating user: ' + error.message);
  }
}

              async function updateUser(userId) {
                const userData = {
                  email: document.getElementById('edit-email').value,
                  username: document.getElementById('edit-username').value,
                  first_name: document.getElementById('edit-firstname').value,
                  last_name: document.getElementById('edit-lastname').value,
                };

                const password = document.getElementById('edit-password').value;
                if (password) {
                  userData.password = password;
                }

                try {
                  const response = await fetch(`/api/users/${userId}`, {
                    method: 'PATCH',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(userData)
                  });

                  if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Unknown error');
                  }

                  window.location.reload();
                } catch (error) {
                  console.error('Error updating user:', error);
                  alert('Error updating user: ' + error.message);
                }
              }
            </script>
          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>
</body>