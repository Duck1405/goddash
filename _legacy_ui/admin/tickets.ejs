<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  
  <body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
      <%- include('../components/navigation') %>
      <div class="md:pl-48 flex flex-col flex-1 h-screen">
        <main class="flex-1 pb-32">
          <div class="py-6">
            <%- include('../components/skeleton') %>
            <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
              <!-- Header -->
              <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                <div class="min-w-0 flex-1">
                  <div class="flex">
                    <div class="relative">
                      <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                          <path fill-rule="evenodd" d="M4.848 2.771A49.144 49.144 0 0112 2.25c2.43 0 4.817.178 7.152.52 1.978.292 3.348 2.024 3.348 3.97v6.02c0 1.946-1.37 3.678-3.348 3.97a48.901 48.901 0 01-3.476.383.39.39 0 00-.297.17l-2.755 4.133a.75.75 0 01-1.248 0l-2.755-4.133a.39.39 0 00-.297-.17 48.9 48.9 0 01-3.476-.384c-1.978-.29-3.348-2.024-3.348-3.97V6.741c0-1.946 1.37-3.68 3.348-3.97z" />
                        </svg>
                      </div>
                    </div>
                    <div class="relative ml-4">
                      <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Support</h2>
                      <p class="text-xs font-thin text-gray-500">Manage and respond to user's tickets.</p>
                    </div>
                  </div>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <div class="flex space-x-4 items-center">
                    <select id="priorityFilter" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                      <option value="all">All Priorities</option>
                      <option value="low">Low</option>
                      <option value="medium">Medium</option>
                      <option value="high">High</option>
                      <option value="urgent">Urgent</option>
                    </select>
                    <select id="categoryFilter" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                      <option value="all">All Categories</option>
                      <option value="technical">Technical</option>
                      <option value="billing">Billing</option>
                      <option value="general">General</option>
                      <option value="abuse">Abuse</option>
                    </select>
                    <select id="statusFilter" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                      <option value="all">All Status</option>
                      <option value="open">Open</option>
                      <option value="closed">Closed</option>
                    </select>
                    <input type="text" id="search" placeholder="Search tickets..." class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl placeholder:text-gray-400 text-gray-600">
                  </div>
                  <button onclick="exportTickets()" class="ml-4 transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-8 py-2 text-sm font-medium text-white hover:bg-[#000000]/80">
                    Export CSV
                  </button>
                </div>
              </div>
  
              <!-- Stats Overview -->
              <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Total Tickets</h3>
                  <p class="mt-2 text-3xl font-semibold text-gray-900" id="totalTickets">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Open Tickets</h3>
                  <p class="mt-2 text-3xl font-semibold text-emerald-600" id="openTickets">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Avg. Response Time</h3>
                  <p class="mt-2 text-3xl font-semibold text-amber-600" id="avgResponseTime">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Last 7 Days</h3>
                  <p class="mt-2 text-3xl font-semibold text-blue-600" id="ticketsLastWeek">-</p>
                </div>
              </div>
  
              <!-- Tickets Table -->
              <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr class="bg-gray-50">
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ticket</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody id="ticketsTableBody" class="bg-gray-50 divide-y divide-gray-200">
                      <!-- Tickets will be loaded here -->
                    </tbody>
                  </table>
                </div>
                <div id="pagination" class="flex justify-between items-center px-6 py-4 bg-gray-50">
                  <div class="text-sm text-gray-500" id="pagination-info"></div>
                  <div class="flex space-x-2" id="pagination-buttons"></div>
                </div>
              </div>
  
              <script>
                let allTickets = [];
                let currentPage = 1;
                let perPage = 10;
  
                document.addEventListener('DOMContentLoaded', () => {
                  loadTickets();
                  setupEventListeners();
                  loadStats();
                  document.getElementById('content').classList.remove('hidden');
                });
  
                function setupEventListeners() {
                  // Search input
                  let searchTimeout;
                  document.getElementById('search').addEventListener('input', (e) => {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => filterTickets(), 300);
                  });
  
                  // Filters
                  ['priorityFilter', 'categoryFilter', 'statusFilter'].forEach(id => {
                    document.getElementById(id).addEventListener('change', filterTickets);
                  });
                }
  
                async function loadStats() {
                  try {
                    const response = await fetch('/api/tickets/stats');
                    const stats = await response.json();
  
                    document.getElementById('totalTickets').textContent = stats.total;
                    document.getElementById('openTickets').textContent = stats.open;
                    document.getElementById('avgResponseTime').textContent = formatResponseTime(stats.averageResponseTime);
                    document.getElementById('ticketsLastWeek').textContent = stats.ticketsLastWeek;
                  } catch (error) {
                    console.error('Error loading stats:', error);
                    showError('Failed to load ticket statistics');
                  }
                }
  
                async function loadTickets() {
                  try {
                    const response = await fetch('/api/tickets/all');
                    allTickets = await response.json();
                    filterTickets();
                  } catch (error) {
                    console.error('Error loading tickets:', error);
                    showError('Failed to load tickets');
                  }
                }
  
                function filterTickets() {
                  const searchTerm = document.getElementById('search').value.toLowerCase();
                  const priority = document.getElementById('priorityFilter').value;
                  const category = document.getElementById('categoryFilter').value;
                  const status = document.getElementById('statusFilter').value;
  
                  let filtered = allTickets;
  
                  if (searchTerm) {
                    filtered = filtered.filter(ticket => 
                      ticket.subject.toLowerCase().includes(searchTerm) ||
                      ticket.user?.username.toLowerCase().includes(searchTerm)
                    );
                  }
  
                  if (priority !== 'all') {
                    filtered = filtered.filter(ticket => ticket.priority === priority);
                  }
  
                  if (category !== 'all') {
                    filtered = filtered.filter(ticket => ticket.category === category);
                  }
  
                  if (status !== 'all') {
                    filtered = filtered.filter(ticket => ticket.status === status);
                  }
  
                  displayTickets(filtered);
                }
  
                function displayTickets(tickets) {
                  const start = (currentPage - 1) * perPage;
                  const end = start + perPage;
                  const paginatedTickets = tickets.slice(start, end);
  
                  const tableBody = document.getElementById('ticketsTableBody');
                  tableBody.innerHTML = '';
  
                  paginatedTickets.forEach(ticket => {
                    const tr = document.createElement('tr');
                    tr.className = 'hover:bg-gray-50';
                    
                    tr.innerHTML = `
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <div>
                            <div class="text-sm font-medium text-gray-900">${ticket.subject}</div>
                            <div class="text-xs text-gray-500">#${ticket.id.slice(0, 8)}</div>
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${ticket.user.username}</div>
                        <div class="text-xs text-gray-500">${ticket.user.email}</div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                          ${ticket.category}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getPriorityClass(ticket.priority)}">
                          ${ticket.priority}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          ticket.status === 'open' 
                            ? 'bg-green-100 text-green-800'
                            : 'bg-gray-100 text-gray-800'
                        }">
                          ${ticket.status}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-center">
                        <div class="flex justify-center space-x-2">
                          <button onclick="viewTicket('${ticket.id}')" 
                                  class="text-gray-600 hover:text-gray-900 transition-all duration-200" 
                                  title="View Ticket">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                              <path d="M10 12.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z" />
                              <path d="M10 12.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z" />
                            <path fill-rule="evenodd" d="M.664 10.59a1.651 1.651 0 010-1.186A10.004 10.004 0 0110 3c4.257 0 7.893 2.66 9.336 6.41.147.381.146.804 0 1.186A10.004 10.004 0 0110 17c-4.257 0-7.893-2.66-9.336-6.41zM14 10a4 4 0 11-8 0 4 4 0 018 0z" />
                          </svg>
                        </button>
                        ${ticket.status === 'open' ? `
                          <button onclick="closeTicket('${ticket.id}')" 
                                  class="text-red-600 hover:text-red-900 transition-all duration-200" 
                                  title="Close Ticket">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 7.5A2.25 2.25 0 0 1 7.5 5.25h9a2.25 2.25 0 0 1 2.25 2.25v9a2.25 2.25 0 0 1-2.25 2.25h-9a2.25 2.25 0 0 1-2.25-2.25v-9Z" />
</svg>
                          </button>
                        ` : `
                          <button onclick="reopenTicket('${ticket.id}')" 
                                  class="text-emerald-600 hover:text-emerald-900 transition-all duration-200" 
                                  title="Reopen Ticket">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
</svg>
                          </button>
                        `}
                        <button onclick="updatePriority('${ticket.id}')" 
                                class="text-gray-600 hover:text-gray-900 transition-all duration-200" 
                                title="Change Priority">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
</svg>
                        </button>
                      </div>
                    </td>
                  `;
                  tableBody.appendChild(tr);
                });

                updatePagination(tickets.length);
              }

              async function viewTicket(ticketId) {
                try {
                  const response = await fetch(`/api/tickets/${ticketId}`);
                  const ticket = await response.json();

                  const modal = document.createElement('div');
                  modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                  modal.innerHTML = `
                    <div class="relative top-20 mx-auto p-5 w-3/4 max-w-3xl opacity-0 transform -translate-y-4 transition-all duration-300">
                      <div class="relative bg-white rounded-2xl shadow-xl p-8">
                        <div class="flex justify-between items-start">
                          <div>
                            <h2 class="text-xl font-semibold text-gray-700">${ticket.subject}</h2>
                            <p class="text-sm text-gray-500 mt-1">Ticket #${ticket.id.slice(0, 8)}</p>
                          </div>
                          <span class="px-3 py-1 text-xs leading-5 font-semibold rounded-full ${getPriorityClass(ticket.priority)}">
                            ${ticket.priority}
                          </span>
                        </div>

                        <div class="mt-6 space-y-4 max-h-96 overflow-y-auto">
${ticket.messages.map(msg => `
  <div class="bg-gray-50 rounded-xl p-4 ${msg.isStaff ? 'ml-8' : 'mr-8'}">
    <div class="flex justify-between items-start">
      <span class="inline-flex items-center">
        ${msg.isSystem ? 
          '<span class="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800 mr-2">System</span>' :
          msg.isStaff ? 
            '<span class="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 mr-2">Staff</span>' : 
            '<span class="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800 mr-2">User</span>'
        }
        <span class="text-sm text-gray-600">
          ${msg.isSystem ? 'System' : 
            msg.isStaff ? `Staff` : '' }
        </span>
      </span>
      <span class="text-xs text-gray-400">${formatDate(msg.timestamp)}</span>
    </div>
    <p class="text-sm text-gray-700 mt-2">${msg.content}</p>
  </div>
`).join('')}
                        </div>

                        <div class="mt-6 border-t border-gray-200 pt-6">
                          <div class="flex space-x-4">
                            <textarea id="replyContent" class="flex-1 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl" rows="3" placeholder="Type your reply..."></textarea>
                            <button onclick="sendReply('${ticketId}')" class="transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-8 py-2 text-sm font-medium text-white hover:bg-[#000000]/80">
                              Send Reply
                            </button>
                          </div>
                        </div>

                        <div class="mt-6 flex justify-end space-x-3">
                          <button onclick="window.location.reload()" class="transition rounded-2xl bg-gray-200 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                            Close
                          </button>
                        </div>
                      </div>
                    </div>
                  `;

                  document.body.appendChild(modal);
                  setTimeout(() => {
                    modal.querySelector('div').classList.remove('opacity-0', '-translate-y-4');
                  }, 10);

                  modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                      window.location.reload();
                    }
                  });
                } catch (error) {
                  console.error('Error viewing ticket:', error);
                  showToast('Failed to load ticket details', 'error');
                }
              }

              async function sendReply(ticketId) {
                const content = document.getElementById('replyContent').value.trim();
                if (!content) return;

                try {
                  const response = await fetch(`/api/tickets/${ticketId}/messages`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content })
                  });

                  if (!response.ok) throw new Error('Failed to send reply');

                  document.getElementById('replyContent').value = '';
                  await loadTickets();
                  showToast('Reply sent successfully', 'success');
                } catch (error) {
                  console.error('Error sending reply:', error);
                  showToast('Failed to send reply', 'error');
                }
              }

              async function updatePriority(ticketId) {
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                modal.innerHTML = `
                  <div class="relative top-20 mx-auto p-5 w-96 max-w-[90%] opacity-0 transform -translate-y-4 transition-all duration-300">
                    <div class="relative bg-white rounded-2xl shadow-xl p-8">
                      <h2 class="text-xl font-semibold text-gray-700 mb-6">Update Priority</h2>
                      <select id="newPriority" class="w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl">
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                        <option value="urgent">Urgent</option>
                      </select>
                      <div class="mt-6 flex justify-end space-x-3">
                        <button onclick="closeModal(this.closest('.fixed'))" class="transition rounded-2xl bg-gray-200 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                          Cancel
                        </button>
                        <button onclick="submitPriorityUpdate('${ticketId}')" class="transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-6 py-2 text-sm font-medium text-white hover:bg-[#000000]/80">
                          Update
                        </button>
                      </div>
                    </div>
                  </div>
                `;

                document.body.appendChild(modal);
                setTimeout(() => {
                  modal.querySelector('div').classList.remove('opacity-0', '-translate-y-4');
                }, 10);

                modal.addEventListener('click', (e) => {
                  if (e.target === modal) {
                    window.location.reload();
                  }
                });
              }

              async function submitPriorityUpdate(ticketId) {
                const priority = document.getElementById('newPriority').value;

                try {
                  const response = await fetch(`/api/tickets/${ticketId}/priority`, {
                    method: 'PATCH',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ priority })
                  });

                  if (!response.ok) throw new Error('Failed to update priority');

                  await loadTickets();
                  closeAllModals();
                  showToast('Priority updated successfully', 'success');
                } catch (error) {
                  console.error('Error updating priority:', error);
                  showToast('Failed to update priority', 'error');
                }
              }

              async function closeTicket(ticketId) {
                await updateTicketStatus(ticketId, 'closed');
              }

              async function reopenTicket(ticketId) {
                await updateTicketStatus(ticketId, 'open');
              }

              async function updateTicketStatus(ticketId, status) {
                try {
                  const response = await fetch(`/api/tickets/${ticketId}/status`, {
                    method: 'PATCH',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status })
                  });

                  if (!response.ok) throw new Error('Failed to update status');

                  await loadTickets();
                  showToast(`Ticket ${status === 'closed' ? 'closed' : 'reopened'} successfully`, 'success');
                } catch (error) {
                  console.error('Error updating ticket status:', error);
                  showToast('Failed to update ticket status', 'error');
                }
              }

              async function exportTickets() {
                try {
                  const response = await fetch('/api/tickets/export');
                  const blob = await response.blob();
                  const url = window.URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `tickets-${formatDate(Date.now())}.csv`;
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  window.URL.revokeObjectURL(url);
                } catch (error) {
                  console.error('Error exporting tickets:', error);
                  showToast('Failed to export tickets', 'error');
                }
              }

              function getPriorityClass(priority) {
                const classes = {
                  low: 'bg-blue-100 text-blue-800',
                  medium: 'bg-yellow-100 text-yellow-800',
                  high: 'bg-orange-100 text-orange-800',
                  urgent: 'bg-red-100 text-red-800'
                };
                return classes[priority] || 'bg-gray-100 text-gray-800';
              }

              function formatDate(timestamp) {
                return new Date(timestamp).toLocaleString();
              }

              function formatResponseTime(ms) {
                if (ms < 60000) return Math.floor(ms / 1000) + ' seconds';
                if (ms < 3600000) return Math.floor(ms / 60000) + ' minutes';
                return Math.floor(ms / 3600000) + ' hours';
              }

              function closeAllModals() {
                document.querySelectorAll('.fixed').forEach(modal => {
                  window.location.reload();
                });
              }

              function closeModal(modal) {
                const modalContent = modal.querySelector('div');
                modalContent.classList.add('opacity-0', '-translate-y-4');
                setTimeout(() => {
                    modal.remove();
                }, 300);
              }

              function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-xl shadow-lg z-50 transform transition-all duration-300 translate-y-full ${
                  type === 'success' ? 'bg-emerald-500' : 'bg-red-500'
                } text-white`;
                toast.textContent = message;
                document.body.appendChild(toast);

                setTimeout(() => {
                  toast.classList.remove('translate-y-full');
                }, 10);

                setTimeout(() => {
                  toast.classList.add('translate-y-full');
                  setTimeout(() => toast.remove(), 300);
                }, 3000);
              }

              function updatePagination(total) {
                const totalPages = Math.ceil(total / perPage);
                
                document.getElementById('pagination-info').textContent = 
                  `Showing ${(currentPage - 1) * perPage + 1} to ${Math.min(currentPage * perPage, total)} of ${total} tickets`;

                const paginationButtons = document.getElementById('pagination-buttons');
                paginationButtons.innerHTML = '';

                // Previous button
                if (currentPage > 1) {
                  const prevButton = document.createElement('button');
                  prevButton.className = 'transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300';
                  prevButton.textContent = 'Previous';
                  prevButton.onclick = () => {
                    currentPage--;
                    filterTickets();
                  };
                  paginationButtons.appendChild(prevButton);
                }

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                  if (
                    i === 1 || 
                    i === totalPages || 
                    (i >= currentPage - 2 && i <= currentPage + 2)
                  ) {
                    const button = document.createElement('button');
                    button.className = `transition rounded-xl px-4 py-2 text-sm font-medium ${
                      i === currentPage 
                        ? 'bg-gray-800 text-white' 
                        : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                    }`;
                    button.textContent = i;
                    button.onclick = () => {
                      currentPage = i;
                      filterTickets();
                    };
                    paginationButtons.appendChild(button);
                  } else if (
                    (i === 2 && currentPage > 4) ||
                    (i === totalPages - 1 && currentPage < totalPages - 3)
                  ) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-3 py-2 text-gray-500';
                    ellipsis.textContent = '...';
                    paginationButtons.appendChild(ellipsis);
                  }
                }

                // Next button
                if (currentPage < totalPages) {
                  const nextButton = document.createElement('button');
                  nextButton.className = 'transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300';
                  nextButton.textContent = 'Next';
                  nextButton.onclick = () => {
                    currentPage++;
                    filterTickets();
                  };
                  paginationButtons.appendChild(nextButton);
                }
              }
            </script>
          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>
</body>