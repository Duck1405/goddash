<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  
  <body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
      <%- include('../components/navigation') %>
      <div class="md:pl-48 flex flex-col flex-1 h-screen">
        <main class="flex-1 pb-32">
          <div class="py-6">
            <%- include('../components/skeleton') %>
            <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
              <!-- Header -->
              <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                <div class="min-w-0 flex-1">
                  <div class="flex">
                    <div class="relative">
                      <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                            <path fill-rule="evenodd" d="M11.484 2.17a.75.75 0 0 1 1.032 0 11.209 11.209 0 0 0 7.877 3.08.75.75 0 0 1 .722.515 12.74 12.74 0 0 1 .635 3.985c0 5.942-4.064 10.933-9.563 12.348a.749.749 0 0 1-.374 0C6.314 20.683 2.25 15.692 2.25 9.75c0-1.39.223-2.73.635-3.985a.75.75 0 0 1 .722-.516l.143.001c2.996 0 5.718-1.17 7.734-3.08ZM12 8.25a.75.75 0 0 1 .75.75v3.75a.75.75 0 0 1-1.5 0V9a.75.75 0 0 1 .75-.75ZM12 15a.75.75 0 0 0-.75.75v.008c0 .414.336.75.75.75h.008a.75.75 0 0 0 .75-.75v-.008a.75.75 0 0 0-.75-.75H12Z" clip-rule="evenodd" />
                        </svg>                          
                      </div>
                    </div>
                    <div class="relative ml-4">
                      <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Radar</h2>
                      <p class="text-xs font-thin text-gray-500">Monitor and manage Radar threat detection nodes.</p>
                    </div>
                  </div>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <div class="flex space-x-4 items-center">
                    <button onclick="addRadarNode()" class="transition inline-flex items-center rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                      </svg>
                      Add Node
                    </button>
                  </div>
                </div>
              </div>

              <div class="lg:flex lg:items-center lg:justify-between p-8 border border-gray-200 rounded-3xl">
                <div class="min-w-0 flex-1 ml-4">
                  <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Now available: Radar 6</h2>
                  <p class="text-xs mt-2 font-thin text-gray-500 mb-2">
                    Update to the next generation of Radar with enhanced threat detection and (new!) real-time alerts.
                  </p>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <span class="sm:ml-3 mr-3">
                    <img src="https://i.imgur.com/Mfbj9N0.png" class="h-20 rounded-full bg-white shadow-sm p-3">
                  </span>
                </div>
              </div>
  
              <!-- Stats Overview -->
              <div class="grid grid-cols-1 mt-8 md:grid-cols-4 gap-6 mb-6">
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Total Nodes</h3>
                  <p class="mt-2 text-3xl font-semibold text-gray-900" id="totalNodes">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Online Nodes</h3>
                  <p class="mt-2 text-3xl font-semibold text-emerald-600" id="onlineNodes">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Total Detections</h3>
                  <p class="mt-2 text-3xl font-semibold text-amber-600" id="totalDetections">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Recent Detections</h3>
                  <p class="mt-2 text-3xl font-semibold text-gray-900" id="recentDetections">-</p>
                </div>
              </div>
  
              <!-- Node List -->
              <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr class="bg-gray-50">
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Node</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Detections</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Check</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody id="nodesTableBody" class="bg-gray-50 divide-y divide-gray-200">
                      <!-- Nodes will be loaded here -->
                    </tbody>
                  </table>
                </div>
              </div>
  
              <!-- Add Node Modal -->
              <div id="addNodeModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                <div class="relative top-20 mx-auto p-5 w-96 max-w-[90%]">
                  <div class="relative bg-white rounded-2xl shadow-xl p-8">
                    <h2 class="text-xl font-semibold text-gray-700 mb-4">Add Radar Node</h2>
                    <form id="addNodeForm" onsubmit="submitNewNode(event)" class="space-y-4">
                      <div>
                        <label class="text-sm font-medium text-gray-600">Node Name</label>
                        <input type="text" id="nodeName" required class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                      </div>
                      <div>
                        <label class="text-sm font-medium text-gray-600">FQDN</label>
                        <input type="text" id="nodeFqdn" required class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                      </div>
                      <div>
                        <label class="text-sm font-medium text-gray-600">Port</label>
                        <input type="number" id="nodePort" required class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                      </div>
                      <div>
                        <label class="text-sm font-medium text-gray-600">Webhook URL (Optional)</label>
                        <input type="text" id="nodeWebhook" class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                      </div>
                      <div class="flex justify-end space-x-3 mt-6">
                        <button type="button" onclick="closeAddNodeModal()" class="transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                          Cancel
                        </button>
                        <button type="submit" class="transition rounded-xl bg-gray-800 px-4 py-2 text-sm font-medium text-white hover:bg-gray-700">
                          Add Node
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
  
              <script>
                let refreshInterval;
  
                document.addEventListener('DOMContentLoaded', () => {
                  loadNodes();
                  loadAnalytics();
                  document.getElementById('content').classList.remove('hidden');
                  
                  // Refresh every 30 seconds
                  refreshInterval = setInterval(() => {
                    loadNodes();
                    loadAnalytics();
                  }, 30000);
                });
  
                async function loadNodes() {
                  try {
                    const response = await fetch('/api/radar/nodes');
                    const nodes = await response.json();
                    
                    const tableBody = document.getElementById('nodesTableBody');
                    tableBody.innerHTML = '';
                    
                    nodes.forEach(node => {
                      const tr = document.createElement('tr');
                      tr.className = 'hover:bg-gray-50';
                      tr.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="flex items-center">
                            <div>
                              <div class="text-sm font-medium text-gray-900">${node.name}</div>
                              <div class="text-sm text-gray-500">${node.fqdn}:${node.port}</div>
                            </div>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            node.status === 'online'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }">
                            ${node.status}
                          </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-900">${node.stats?.total_detections || 0} total</div>
                          <div class="text-xs text-gray-500">${node.stats?.recent_detections || 0} recent</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-500">
                            ${new Date(node.lastCheck || Date.now()).toLocaleString()}
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-center">
                          <div class="flex justify-center space-x-2">
                            <button onclick="viewNodeDetails('${node.id}')" 
                                    class="text-gray-600 hover:text-gray-900 transition-all duration-200">
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>
                              </svg>
                            </button>
                            <button onclick="editNode('${node.id}')"
                                    class="text-blue-600 hover:text-blue-900 transition-all duration-200">
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                              </svg>
                            </button>
                            <button onclick="deleteNode('${node.id}')"
                                    class="text-red-600 hover:text-red-900 transition-all duration-200">
<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                            </svg>
                          </button>
                        </div>
                      </td>
                    `;
                    tableBody.appendChild(tr);
                  });

                  // Update stats
                  document.getElementById('totalNodes').textContent = nodes.length;
                  document.getElementById('onlineNodes').textContent = nodes.filter(n => n.status === 'online').length;
                } catch (error) {
                  console.error('Error loading nodes:', error);
                  showToast('Failed to load Radar nodes', 'error');
                }
              }

              async function loadAnalytics() {
                try {
                  const response = await fetch('/api/radar/analytics');
                  const analytics = await response.json();
                  
                  document.getElementById('totalDetections').textContent = analytics.total_detections || 0;
                  document.getElementById('recentDetections').textContent = analytics.recent_detections || 0;
                } catch (error) {
                  console.error('Error loading analytics:', error);
                }
              }

              async function viewNodeDetails(nodeId) {
  try {
    const response = await fetch(`/api/radar/nodes/${nodeId}/detections`);
    const data = await response.json();

    function truncateDetections(types) {
      const joined = types.join(', ');
      if (joined.length <= 50) return joined;
      return joined.substring(0, 47) + '...';
    }

    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
    modal.innerHTML = `
      <div class="relative top-20 mx-auto p-5 w-[90%] max-w-4xl">
        <div class="relative bg-white rounded-2xl shadow-xl p-8">
          <h2 class="text-xl font-semibold text-gray-700 mb-4">Node Detections</h2>
          <div class="overflow-y-auto max-h-[60vh]">
            ${data.detections.length ? `
              <div class="space-y-4">
                ${data.detections.map(detection => `
                  <div class="bg-gray-50 rounded-xl p-4 border border-gray-200">
                    <div class="flex justify-between items-start">
                      <div>
                        <h3 class="text-sm font-medium text-gray-900">
                          Detection ID: ${detection.id}
                        </h3>
                        <p class="text-sm text-gray-500 mt-1">
                          ${new Date(detection.timestamp).toLocaleString()}
                        </p>
                      </div>
                      <span class="px-3 py-1 text-xs font-medium rounded-full bg-amber-100 text-amber-800">
                        ${truncateDetections(detection.types)}
                      </span>
                    </div>
                    <div class="mt-4 grid grid-cols-2 gap-4">
                      <div>
                        <h4 class="text-xs font-medium text-gray-500">Container Info</h4>
                        <p class="mt-1 text-sm text-gray-900">
                          ID: ${detection.containerId}<br>
                          Volume: ${detection.volumeId}
                        </p>
                      </div>
                      <div>
                        <h4 class="text-xs font-medium text-gray-500">Resource Usage</h4>
                        <p class="mt-1 text-sm text-gray-900">
                          CPU: ${detection.metrics.cpu}%<br>
                          Memory: ${detection.metrics.memory}MB<br>
                          Network: ${detection.metrics.network}MB
                        </p>
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : `
              <div class="text-center text-gray-500 py-8">
                No detections found
              </div>
            `}
          </div>
          <div class="mt-6 flex justify-end">
            <button onclick="closeModal(this.closest('.fixed'))" 
                    class="transition rounded-xl bg-gray-200 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
              Close
            </button>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);
  } catch (error) {
    console.error('Error loading node details:', error);
    showToast('Failed to load node details', 'error');
  }
}

              async function deleteNode(nodeId) {
                if (!confirm('Are you sure you want to delete this Radar node?')) return;

                try {
                  const response = await fetch(`/api/radar/nodes/${nodeId}`, {
                    method: 'DELETE'
                  });

                  if (!response.ok) throw new Error('Failed to delete node');

                  showToast('Node deleted successfully');
                  loadNodes();
                  loadAnalytics();
                } catch (error) {
                  console.error('Error deleting node:', error);
                  showToast('Failed to delete node', 'error');
                }
              }

              function addRadarNode() {
                document.getElementById('addNodeModal').classList.remove('hidden');
              }

              function closeAddNodeModal() {
                document.getElementById('addNodeModal').classList.add('hidden');
                document.getElementById('addNodeForm').reset();
              }

              async function submitNewNode(event) {
                event.preventDefault();

                const nodeData = {
                  name: document.getElementById('nodeName').value,
                  fqdn: document.getElementById('nodeFqdn').value,
                  port: parseInt(document.getElementById('nodePort').value),
                  webhookUrl: document.getElementById('nodeWebhook').value || null
                };

                try {
                  const response = await fetch('/api/radar/nodes', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(nodeData)
                  });

                  if (!response.ok) throw new Error('Failed to add node');

                  showToast('Node added successfully');
                  closeAddNodeModal();
                  loadNodes();
                } catch (error) {
                  console.error('Error adding node:', error);
                  showToast('Failed to add node', 'error');
                }
              }

              async function editNode(nodeId) {
                try {
                  const response = await fetch(`/api/radar/nodes/${nodeId}`);
                  const node = await response.json();

                  const modal = document.createElement('div');
                  modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                  modal.innerHTML = `
                    <div class="relative top-20 mx-auto p-5 w-96 max-w-[90%]">
                      <div class="relative bg-white rounded-2xl shadow-xl p-8">
                        <h2 class="text-xl font-semibold text-gray-700 mb-4">Edit Radar Node</h2>
                        <form onsubmit="updateNode(event, '${nodeId}')" class="space-y-4">
                          <div>
                            <label class="text-sm font-medium text-gray-600">Node Name</label>
                            <input type="text" name="name" required value="${node.name}"
                                   class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">FQDN</label>
                            <input type="text" name="fqdn" required value="${node.fqdn}"
                                   class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">Port</label>
                            <input type="number" name="port" required value="${node.port}"
                                   class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">Webhook URL</label>
                            <input type="text" name="webhookUrl" value="${node.webhookUrl || ''}"
                                   class="mt-1 w-full px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm rounded-xl">
                          </div>
                          <div class="flex justify-end space-x-3 mt-6">
                            <button type="button" onclick="closeModal(this.closest('.fixed'))"
                                    class="transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                              Cancel
                            </button>
                            <button type="submit"
                                    class="transition rounded-xl bg-gray-800 px-4 py-2 text-sm font-medium text-white hover:bg-gray-700">
                              Save Changes
                            </button>
                          </div>
                        </form>
                      </div>
                    </div>
                  `;

                  document.body.appendChild(modal);
                } catch (error) {
                  console.error('Error loading node for editing:', error);
                  showToast('Failed to load node details', 'error');
                }
              }

              async function updateNode(event, nodeId) {
                event.preventDefault();
                const form = event.target;

                const nodeData = {
                  name: form.name.value,
                  fqdn: form.fqdn.value,
                  port: parseInt(form.port.value),
                  webhookUrl: form.webhookUrl.value || null
                };

                try {
                  const response = await fetch(`/api/radar/nodes/${nodeId}`, {
                    method: 'PATCH',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(nodeData)
                  });

                  if (!response.ok) throw new Error('Failed to update node');

                  showToast('Node updated successfully');
                  closeModal(form.closest('.fixed'));
                  loadNodes();
                } catch (error) {
                  console.error('Error updating node:', error);
                  showToast('Failed to update node', 'error');
                }
              }

              function closeModal(modal) {
                modal.remove();
              }

              function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-xl shadow-lg z-50 transform transition-all duration-300 translate-y-full ${
                  type === 'success' ? 'bg-emerald-500' : 'bg-red-500'
                } text-white`;
                toast.textContent = message;
                document.body.appendChild(toast);

                setTimeout(() => {
                  toast.classList.remove('translate-y-full');
                }, 10);

                setTimeout(() => {
                  toast.classList.add('translate-y-full');
                  setTimeout(() => toast.remove(), 300);
                }, 3000);
              }
            </script>
          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>
</body>