<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
    <!-- Inter font -->
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  
  <body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
      <%- include('../components/navigation') %>
      <div class="md:pl-48 flex flex-col flex-1 h-screen">
        <main class="flex-1 pb-32">
          <div class="py-6">
            <% /* Skeleton loader, lasts about 0.3s to let the page content load */ %>
            <%- include('../components/skeleton') %>
            <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
              <!-- Content -->
              <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                <div class="min-w-0 flex-1">
                  <div class="flex">
                    <div class="relative">
                      <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                            <path d="M16.5 6a3 3 0 0 0-3-3H6a3 3 0 0 0-3 3v7.5a3 3 0 0 0 3 3v-6A4.5 4.5 0 0 1 10.5 6h6Z" />
                            <path d="M18 7.5a3 3 0 0 1 3 3V18a3 3 0 0 1-3 3h-7.5a3 3 0 0 1-3-3v-7.5a3 3 0 0 1 3-3H18Z" />
                          </svg>       
                      </div>
                    </div>
                    <div class="relative ml-4">
                      <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Nodes</h2>
                      <p class="text-xs font-thin text-gray-500">View and monitor node status across locations.</p>
                    </div>
                  </div>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <div class="flex space-x-4 items-center">
                    <input type="text" id="search" placeholder="Search nodes..." class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl placeholder:text-gray-400 text-gray-600">
                    <select id="locationFilter" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                      <option value="all">All Locations</option>
                    </select>
                  </div>
                </div>
              </div>
  
              <!-- Nodes Stats Overview -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Total Nodes</h3>
                  <p class="mt-2 text-3xl font-semibold text-gray-900" id="totalNodes">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Online Nodes</h3>
                  <p class="mt-2 text-3xl font-semibold text-emerald-600" id="onlineNodes">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Offline Nodes</h3>
                  <p class="mt-2 text-3xl font-semibold text-gray-600" id="offlineNodes">-</p>
                </div>
              </div>
  
              <!-- Nodes List -->
              <div id="nodesContainer">
                <!-- Node groups will be dynamically inserted here -->
              </div>
  
              <script>
                let allNodes = [];
                let nodeStatuses = {};
                
                document.addEventListener('DOMContentLoaded', () => {
                  loadNodes();
                  setupEventListeners();
                  document.getElementById('content').classList.remove('hidden');
                  
                  // Refresh node statuses every 30 seconds
                  setInterval(refreshNodeStatuses, 30000);
                });
  
                function setupEventListeners() {
                  // Search input
                  let timeout;
                  document.getElementById('search').addEventListener('input', (e) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                      filterNodes(e.target.value.toLowerCase());
                    }, 300);
                  });
  
                  // Location filter
                  document.getElementById('locationFilter').addEventListener('change', (e) => {
                    filterNodes(document.getElementById('search').value.toLowerCase(), e.target.value);
                  });
                }
  
                async function loadNodes() {
                  try {
                    const response = await fetch('/api/nodes?per_page=10000');
                    const data = await response.json();
                    allNodes = data.data;
  
                    // Update location filter options
                    updateLocationFilter();
  
                    // Initialize status checks
                    await refreshNodeStatuses();
  
                    // Display nodes
                    displayNodes();
                  } catch (error) {
                    console.error('Error loading nodes:', error);
                  }
                }
  

                function updateLocationFilter() {
                const locations = new Set();
                allNodes.forEach(node => {
                  const location = getLocationCode(node.attributes.name);
                  if (location !== 'Unknown location (cannot decipher node name)') {
                    locations.add(location);
                  }
                });

                const locationFilter = document.getElementById('locationFilter');
                locationFilter.innerHTML = '<option value="all">All Locations</option>';
                [...locations].sort().forEach(location => {
                  locationFilter.innerHTML += `<option value="${location}">${location}</option>`;
                });
              }
  
              function getLocationCode(nodeName) {
                // Extract location code from node name
                // Matches 2-3 uppercase letters at start of string
                const match = nodeName.match(/^[A-Z]{2,3}/);
                return match ? match[0] : 'Unknown location (cannot decipher node name)';
              }
  
                async function checkNodeStatus(node) {
                  try {
                    const configResponse = await fetch(`/api/nodes/${node.attributes.id}/configuration`);
                    if (!configResponse.ok) {
                      throw new Error('Failed to get node configuration');
                    }
                    const config = await configResponse.json();
  
                    // Try to connect to Wings
                    const wingsResponse = await fetch(`${config.wings_url}/api/system`, {
                      headers: {
                        'Authorization': `Bearer ${config.token}`,
                      }
                    });
  
                    return wingsResponse.ok;
                  } catch (error) {
                    console.error(`Error checking node ${node.attributes.name} status:`, error);
                    return false;
                  }
                }
  
                async function refreshNodeStatuses() {
                  const statusChecks = allNodes.map(async node => {
                    nodeStatuses[node.attributes.id] = await checkNodeStatus(node);
                  });
  
                  await Promise.all(statusChecks);
  
                  // Update stats
                  const total = allNodes.length;
                  const online = Object.values(nodeStatuses).filter(status => status).length;
                  
                  document.getElementById('totalNodes').textContent = total;
                  document.getElementById('onlineNodes').textContent = online;
                  document.getElementById('offlineNodes').textContent = total - online;
  
                  // Refresh display
                  displayNodes();
                }
  
                function filterNodes(searchTerm = '', location = 'all') {
                let filteredNodes = allNodes;

                if (searchTerm) {
                  filteredNodes = filteredNodes.filter(node => 
                    node.attributes.name.toLowerCase().includes(searchTerm) ||
                    node.attributes.description?.toLowerCase().includes(searchTerm)
                  );
                }

                if (location !== 'all') {
                  filteredNodes = filteredNodes.filter(node => 
                    getLocationCode(node.attributes.name) === location
                  );
                }

                displayFilteredNodes(filteredNodes);
              }
  
                function displayFilteredNodes(nodes) {
                // Group nodes by location
                const nodeGroups = {};
                nodes.forEach(node => {
                  const location = getLocationCode(node.attributes.name);
                  if (!nodeGroups[location]) {
                    nodeGroups[location] = [];
                  }
                  nodeGroups[location].push(node);
                });

                // Sort nodes within each group
                Object.values(nodeGroups).forEach(group => {
                  group.sort((a, b) => a.attributes.name.localeCompare(b.attributes.name));
                });

                  displayNodeGroups(nodeGroups);
                }
  
                function displayNodes() {
                  displayFilteredNodes(allNodes);
                }
  
                function displayNodeGroups(nodeGroups) {
                  const container = document.getElementById('nodesContainer');
                  container.innerHTML = '';

                Object.entries(nodeGroups)
                  .sort(([locA], [locB]) => locA.localeCompare(locB))
                  .forEach(([location, nodes]) => {
                    const groupDiv = document.createElement('div');
                    groupDiv.className = 'mb-8';
                    groupDiv.innerHTML = `
                      <h2 class="text-lg font-semibold text-gray-700 mb-4">${location}</h2>
                      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        ${nodes.map(node => createNodeCard(node)).join('')}
                      </div>
                    `;
                    container.appendChild(groupDiv);
                  });
              }
  
                function createNodeCard(node) {
                  const isOnline = nodeStatuses[node.attributes.id];
                  const statusColor = isOnline ? 'emerald' : 'red';
                  const memory = formatBytes(node.attributes.memory);
                  const disk = formatBytes(node.attributes.disk);
  
                  return `
                    <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-8 transition-all duration-300 hover:bg-gray-50 hover:border-gray-300">
                      <div class="flex justify-between items-start">
                        <div>
                          <h3 class="text-lg font-medium text-gray-900">
                            ${node.attributes.name}
                          </h3>
                          <p class="text-sm text-gray-500">${node.attributes.description || ''}</p>
                        </div>
                        <span class="flex-shrink-0 relative inline-block">
                          <span class="absolute top-0 right-0 block h-2.5 w-2.5 rounded-sm ring-2 ring-white bg-${statusColor}-400"></span>
                        </span>
                      </div>
                      <dl class="mt-4 grid grid-cols-1 gap-y-4">
                        <div>
                          <dt class="text-sm font-medium text-gray-500">Memory</dt>
                          <dd class="mt-1 text-sm text-gray-900">${memory}</dd>
                        </div>
                        <div>
                          <dt class="text-sm font-medium text-gray-500">Disk</dt>
                          <dd class="mt-1 text-sm text-gray-900">${disk}</dd>
                        </div>
                        <div>
                          <dt class="text-sm font-medium text-gray-500">Status</dt>
                          <dd class="mt-1 text-sm text-${statusColor}-600">
                            ${isOnline ? 'Online' : 'Offline'}
                          </dd>
                        </div>
                      </dl>
                    </div>
                  `;
                }
  
                function formatBytes(bytes) {
                  if (bytes === 0) return '0 GB';
                  const k = 1024;
                  const sizes = ['MB', 'GB', 'TB'];
                  const i = Math.floor(Math.log(bytes) / Math.log(k));
                  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
                }
              </script>
            </div>
          </div>
        </main>
        <%- include('../components/footer') %>
      </div>
    </div>
  </body>