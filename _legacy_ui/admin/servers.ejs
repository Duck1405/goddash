<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
    <!-- Inter font -->
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  
  <body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
      <%- include('../components/navigation') %>
      <div class="md:pl-48 flex flex-col flex-1 h-screen">
        <main class="flex-1 pb-32">
          <div class="py-6">
            <% /* Skeleton loader */ %>
            <%- include('../components/skeleton') %>
            <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
              <!-- Content -->
              <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                <div class="min-w-0 flex-1">
                  <div class="flex">
                    <div class="relative">
                      <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                          <path d="M5.507 4.048A3 3 0 017.785 3h8.43a3 3 0 012.278 1.048l1.722 2.008A4.533 4.533 0 0019.5 6h-15c-.243 0-.482.02-.715.056l1.722-2.008z" />
                          <path fill-rule="evenodd" d="M1.5 10.5a3 3 0 013-3h15a3 3 0 110 6h-15a3 3 0 01-3-3zm15 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm2.25.75a.75.75 0 100-1.5.75.75 0 000 1.5zM4.5 15a3 3 0 100 6h15a3 3 0 100-6h-15zm11.25 3.75a.75.75 0 100-1.5.75.75 0 000 1.5zM19.5 18a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    </div>
                    <div class="relative ml-4">
                      <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Servers</h2>
                      <p class="text-xs font-thin text-gray-500">Manage and monitor all servers on the panel.</p>
                    </div>
                  </div>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <div class="flex space-x-4 items-center">
                    <select id="statusFilter" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                      <option value="all">All Status</option>
                      <option value="active">Active</option>
                      <option value="suspended">Suspended</option>
                    </select>
                    <input type="text" id="search" placeholder="Search servers..." class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl placeholder:text-gray-400 text-gray-600">
                    <select id="perPage" class="px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 text-sm rounded-xl text-gray-600">
                      <option value="10">10 per page</option>
                      <option value="25">25 per page</option>
                      <option value="50">50 per page</option>
                      <option value="100">100 per page</option>
                    </select>
                  </div>
                </div>
              </div>
  
              <!-- Stats Overview -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Total Servers</h3>
                  <p class="mt-2 text-3xl font-semibold text-gray-900" id="totalServers">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Active</h3>
                  <p class="mt-2 text-3xl font-semibold text-emerald-600" id="activeServers">-</p>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm p-6">
                  <h3 class="text-sm font-medium text-gray-500">Suspended</h3>
                  <p class="mt-2 text-3xl font-semibold text-amber-600" id="suspendedServers">-</p>
                </div>
              </div>
  
              <!-- Servers Table -->
              <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr class="bg-gray-50">
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Server</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Owner</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Resources</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody id="serversTableBody" class="bg-gray-50 divide-y divide-gray-200">
                      <!-- Servers will be loaded here -->
                    </tbody>
                  </table>
                </div>
                <div id="pagination" class="flex justify-between items-center px-6 py-4 bg-gray-50">
                  <div class="text-sm text-gray-500" id="pagination-info"></div>
                  <div class="flex space-x-2" id="pagination-buttons"></div>
                </div>
              </div>
  
              <script>
                let allServers = [];
                let currentPage = 1;
                let usersCache = new Map();
                
                document.addEventListener('DOMContentLoaded', () => {
                  loadServers();
                  setupEventListeners();
                  document.getElementById('content').classList.remove('hidden');
                });
  
                function setupEventListeners() {
                  // Search input
                  let timeout;
                  document.getElementById('search').addEventListener('input', (e) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                      filterServers();
                    }, 300);
                  });
  
                  // Status filter
                  document.getElementById('statusFilter').addEventListener('change', filterServers);
  
                  // Per page select
                  document.getElementById('perPage').addEventListener('change', () => {
                    currentPage = 1;
                    filterServers();
                  });
                }
  
                async function loadServers() {
                  try {
                    const response = await fetch('/api/servers?per_page=10000');
                    const data = await response.json();
                    allServers = data.data;
                    updateStats();
                    filterServers();
                  } catch (error) {
                    console.error('Error loading servers:', error);
                    showError('Failed to load servers');
                  }
                }
  
                function updateStats() {
                  const total = allServers.length;
                  const suspended = allServers.filter(server => server.attributes.suspended).length;
                  const active = total - suspended;
  
                  document.getElementById('totalServers').textContent = total;
                  document.getElementById('activeServers').textContent = active;
                  document.getElementById('suspendedServers').textContent = suspended;
                }
  
                async function getUserInfo(userId) {
                  if (usersCache.has(userId)) {
                    return usersCache.get(userId);
                  }
  
                  try {
                    const response = await fetch(`/api/users/${userId}`);
                    const data = await response.json();
                    usersCache.set(userId, data);
                    return data;
                  } catch (error) {
                    console.error(`Error fetching user ${userId}:`, error);
                    return null;
                  }
                }
  
                function filterServers() {
                  const searchTerm = document.getElementById('search').value.toLowerCase();
                  const statusFilter = document.getElementById('statusFilter').value;
                  const perPage = parseInt(document.getElementById('perPage').value);
  
                  let filteredServers = allServers;
  
                  // Apply search filter
                  if (searchTerm) {
                    filteredServers = filteredServers.filter(server => 
                      server.attributes.name.toLowerCase().includes(searchTerm) ||
                      server.attributes.identifier.toLowerCase().includes(searchTerm)
                    );
                  }
  
                  // Apply status filter
                  if (statusFilter !== 'all') {
                    filteredServers = filteredServers.filter(server => 
                      statusFilter === 'suspended' ? server.attributes.suspended : !server.attributes.suspended
                    );
                  }
  
                  // Calculate pagination
                  const totalPages = Math.ceil(filteredServers.length / perPage);
                  const start = (currentPage - 1) * perPage;
                  const end = start + perPage;
                  const paginatedServers = filteredServers.slice(start, end);
  
                  displayServers(paginatedServers);
                  updatePagination(filteredServers.length, start, end, perPage);
                }
  
                async function displayServers(servers) {
                  const tableBody = document.getElementById('serversTableBody');
                  tableBody.innerHTML = '';
  
                  for (const server of servers) {
                    const user = await getUserInfo(server.attributes.user);
                    const tr = document.createElement('tr');
                    tr.className = 'hover:bg-gray-50';
                    
                    tr.innerHTML = `
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <div>
                            <div class="text-sm font-medium text-gray-900">${server.attributes.name}</div>
                            <div class="text-sm text-gray-500">${server.attributes.identifier}</div>
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${user ? user.attributes.username : 'Loading...'}</div>
                        <div class="text-xs text-gray-500">${user ? user.attributes.email : ''}</div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex flex-col">
                          <span class="text-sm text-gray-500">${formatBytes(server.attributes.limits.memory)} memory</span>
                          <span class="text-sm text-gray-500">${server.attributes.limits.cpu}% CPU</span>
                          <span class="text-sm text-gray-500">${formatBytes(server.attributes.limits.disk)} disk</span>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          server.attributes.suspended
                            ? 'bg-red-100 text-red-800'
                            : 'bg-green-100 text-green-800'
                        }">
                          ${server.attributes.suspended ? 'Suspended' : 'Active'}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-center">
                        <div class="flex justify-center space-x-2">
                          ${server.attributes.suspended ? `
                            <button onclick="unsuspendServer('${server.attributes.id}')" 
                                    class="text-emerald-600 hover:text-emerald-900 transition-all duration-200" 
                                    title="Unsuspend Server">
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
  <path fill-rule="evenodd" d="M9.661 2.237a.531.531 0 0 1 .678 0 11.947 11.947 0 0 0 7.078 2.749.5.5 0 0 1 .479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 0 1-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 0 1 .48-.425 11.947 11.947 0 0 0 7.077-2.75Zm4.196 5.954a.75.75 0 0 0-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 1 0-1.06 1.061l2.5 2.5a.75.75 0 0 0 1.137-.089l4-5.5Z" clip-rule="evenodd" />
</svg>
                            </button>
                          ` : `
                            <button onclick="suspendServer('${server.attributes.id}')" 
                                    class="text-amber-600 hover:text-amber-900 transition-all duration-200" 
                                    title="Suspend Server">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
  <path fill-rule="evenodd" d="m5.965 4.904 9.131 9.131a6.5 6.5 0 0 0-9.131-9.131Zm8.07 10.192L4.904 5.965a6.5 6.5 0 0 0 9.131 9.131ZM4.343 4.343a8 8 0 1 1 11.314 11.314A8 8 0 0 1 4.343 4.343Z" clip-rule="evenodd" />
</svg>
                          </button>
                        `}
                        <button onclick="viewUserDetails('${server.attributes.user}')" 
                                class="text-gray-600 hover:text-gray-900 transition-all duration-200" 
                                title="View User Details">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
  <path fill-rule="evenodd" d="M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-5.5-2.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0ZM10 12a5.99 5.99 0 0 0-4.793 2.39A6.483 6.483 0 0 0 10 16.5a6.483 6.483 0 0 0 4.793-2.11A5.99 5.99 0 0 0 10 12Z" clip-rule="evenodd" />
</svg>
                        </button>
                      </div>
                    </td>
                  `;
                  tableBody.appendChild(tr);
                }
              }

              async function suspendServer(serverId) {
                try {
                  const response = await fetch(`/api/servers/${serverId}/suspend`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    }
                  });

                  if (!response.ok) throw new Error('Failed to suspend server');

                  // Update server in allServers array
                  const serverIndex = allServers.findIndex(s => s.attributes.id === serverId);
                  if (serverIndex !== -1) {
                    allServers[serverIndex].attributes.suspended = true;
                  }

                  // Refresh display
                  updateStats();
                  filterServers();

                  showToast('Server suspended successfully', 'success');
                } catch (error) {
                  console.error('Error suspending server:', error);
                  showToast('Failed to suspend server', 'error');
                }
              }

              async function unsuspendServer(serverId) {
                try {
                  const response = await fetch(`/api/servers/${serverId}/unsuspend`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    }
                  });

                  if (!response.ok) throw new Error('Failed to unsuspend server');

                  // Update server in allServers array
                  const serverIndex = allServers.findIndex(s => s.attributes.id === serverId);
                  if (serverIndex !== -1) {
                    allServers[serverIndex].attributes.suspended = false;
                  }

                  // Refresh display
                  updateStats();
                  filterServers();

                  showToast('Server unsuspended successfully', 'success');
                } catch (error) {
                  console.error('Error unsuspending server:', error);
                  showToast('Failed to unsuspend server', 'error');
                }
              }

              function viewUserDetails(userId) {
                getUserInfo(userId).then(user => {
                  if (!user) {
                    showToast('Failed to load user details', 'error');
                    return;
                  }

                  const modal = document.createElement('div');
                  modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                  modal.innerHTML = `
                    <div class="relative top-20 mx-auto p-5 w-96 max-w-[90%] opacity-0 transform -translate-y-4 transition-all duration-300">
                      <div class="relative bg-white rounded-2xl shadow-xl p-8">
                        <h2 class="text-xl font-semibold text-gray-700 mb-4">User Details</h2>
                        <div class="space-y-4">
                          <div>
                            <label class="text-sm font-medium text-gray-600">Username</label>
                            <p class="mt-1 text-sm text-gray-900">${user.attributes.username}</p>
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">Prism ID</label>
                            <p class="mt-1 text-sm text-gray-900">${user.attributes.username}</p>
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">Email</label>
                            <p class="mt-1 text-sm text-gray-900">${user.attributes.email}</p>
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">Name</label>
                            <p class="mt-1 text-sm text-gray-900">${user.attributes.first_name} ${user.attributes.last_name}</p>
                          </div>
                          <div>
                            <label class="text-sm font-medium text-gray-600">Account Created</label>
                            <p class="mt-1 text-sm text-gray-900">${new Date(user.attributes.created_at).toLocaleString()}</p>
                          </div>
                        </div>
                        <div class="mt-6 flex justify-end">
                          <button onclick="closeModal(this.closest('.fixed'))" class="transition rounded-2xl bg-gray-200 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                            Close
                          </button>
                        </div>
                      </div>
                    </div>
                  `;

                  document.body.appendChild(modal);
                  setTimeout(() => {
                    modal.querySelector('div').classList.remove('opacity-0', '-translate-y-4');
                  }, 10);

                  // Close on background click
                  modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                      closeModal(modal);
                    }
                  });
                });
              }

              function closeModal(modal) {
                const modalContent = modal.querySelector('div');
                modalContent.classList.add('opacity-0', '-translate-y-4');
                setTimeout(() => {
                  modal.remove();
                }, 300);
              }

              function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-xl shadow-lg z-50 transform transition-all duration-300 translate-y-full ${
                  type === 'success' ? 'bg-emerald-500' : 'bg-red-500'
                } text-white`;
                toast.textContent = message;
                document.body.appendChild(toast);

                setTimeout(() => {
                  toast.classList.remove('translate-y-full');
                }, 10);

                setTimeout(() => {
                  toast.classList.add('translate-y-full');
                  setTimeout(() => toast.remove(), 300);
                }, 3000);
              }

              function formatBytes(bytes) {
                const mb = bytes;
                if (mb >= 1024) {
                  return (mb / 1024).toFixed(2) + ' GiB';
                }
                return mb + ' MiB';
              }

              function updatePagination(total, start, end, perPage) {
                const totalPages = Math.ceil(total / perPage);
                
                document.getElementById('pagination-info').textContent = 
                  `Showing ${start + 1} to ${Math.min(end, total)} of ${total} servers`;

                const paginationButtons = document.getElementById('pagination-buttons');
                paginationButtons.innerHTML = '';

                // Previous button
                if (currentPage > 1) {
                  const prevButton = document.createElement('button');
                  prevButton.className = 'transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300';
                  prevButton.textContent = 'Previous';
                  prevButton.onclick = () => {
                    currentPage--;
                    filterServers();
                  };
                  paginationButtons.appendChild(prevButton);
                }

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                  if (
                    i === 1 || 
                    i === totalPages || 
                    (i >= currentPage - 2 && i <= currentPage + 2)
                  ) {
                    const button = document.createElement('button');
                    button.className = `transition rounded-xl px-4 py-2 text-sm font-medium ${
                      i === currentPage 
                        ? 'bg-gray-800 text-white' 
                        : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                    }`;
                    button.textContent = i;
                    button.onclick = () => {
                      currentPage = i;
                      filterServers();
                    };
                    paginationButtons.appendChild(button);
                  } else if (
                    (i === 2 && currentPage > 4) ||
                    (i === totalPages - 1 && currentPage < totalPages - 3)
                  ) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-3 py-2 text-gray-500';
                    ellipsis.textContent = '...';
                    paginationButtons.appendChild(ellipsis);
                  }
                }

                // Next button
                if (currentPage < totalPages) {
                  const nextButton = document.createElement('button');
                  nextButton.className = 'transition rounded-xl bg-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300';
                  nextButton.textContent = 'Next';
                  nextButton.onclick = () => {
                    currentPage++;
                    filterServers();
                  };
                  paginationButtons.appendChild(nextButton);
                }
              }
            </script>
          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>
</body>