<!DOCTYPE html>
<html>
<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.43.0/min/vs/loader.js"></script>
</head>

<body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
        <%- include('../components/navigation') %>
        <div class="md:pl-48 flex flex-col flex-1 h-screen">
            <main class="flex-1">
                <div class="py-6">
                    <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
                        <!-- Header -->
                        <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                            <div class="min-w-0 flex-1">
                                <div class="flex">
                                    <div class="relative">
                                        <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                                                <path fill-rule="evenodd" d="M11.078 2.25c-.917 0-1.699.663-1.85 1.567L9.05 4.889c-.02.12-.115.26-.297.348a7.493 7.493 0 0 0-.986.57c-.166.115-.334.126-.45.083L6.3 5.508a1.875 1.875 0 0 0-2.282.819l-.922 1.597a1.875 1.875 0 0 0 .432 2.385l.84.692c.095.078.17.229.154.43a7.598 7.598 0 0 0 0 1.139c.015.2-.059.352-.153.43l-.841.692a1.875 1.875 0 0 0-.432 2.385l.922 1.597a1.875 1.875 0 0 0 2.282.818l1.019-.382c.115-.043.283-.031.45.082.312.214.641.405.985.57.182.088.277.228.297.35l.178 1.071c.151.904.933 1.567 1.85 1.567h1.844c.916 0 1.699-.663 1.85-1.567l.178-1.072c.02-.12.114-.26.297-.349.344-.165.673-.356.985-.57.167-.114.335-.125.45-.082l1.02.382a1.875 1.875 0 0 0 2.28-.819l.923-1.597a1.875 1.875 0 0 0-.432-2.385l-.84-.692c-.095-.078-.17-.229-.154-.43a7.614 7.614 0 0 0 0-1.139c-.016-.2.059-.352.153-.43l.84-.692c.708-.582.891-1.59.433-2.385l-.922-1.597a1.875 1.875 0 0 0-2.282-.818l-1.02.382c-.114.043-.282.031-.449-.083a7.49 7.49 0 0 0-.985-.57c-.183-.087-.277-.227-.297-.348l-.179-1.072a1.875 1.875 0 0 0-1.85-1.567h-1.843ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z" clip-rule="evenodd" />
                                            </svg>
                                        </div>
                                    </div>
                                    <div class="relative ml-4">
                                        <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Settings</h2>
                                        <p class="text-xs font-thin text-gray-500">Configure your Prism installation.</p>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-5 flex lg:mt-0 lg:ml-4 space-x-3">
                                <button onclick="showBackupsModal()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                    <svg class="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" />
                                    </svg>
                                    Backups
                                </button>
                                <button id="saveButton" type="button" class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl shadow-sm text-sm font-medium text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                    <svg class="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M7.707 10.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V6h-2v5.586l-1.293-1.293z" />
                                    </svg>
                                    Save Changes
                                </button>
                            </div>
                        </div>

                        <!-- Editor -->
                        <div class="bg-white rounded-lg border border-gray-200 shadow-sm">
                            <div id="editor" style="height: 800px;"></div>
                        </div>

                        <!-- Backups Modal -->
                        <div id="backupsModal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 overflow-y-auto z-50">
                            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                                <div class="relative transform overflow-hidden rounded-xl bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:p-6">
                                    <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                                        <button onclick="closeBackupsModal()" type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500">
                                            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </div>
                                    <div class="sm:flex sm:items-start">
                                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
                                            <h3 class="text-base font-semibold leading-6 text-gray-900">Configuration Backups</h3>
                                            <div class="mt-4">
                                                <div class="flow-root">
                                                    <ul role="list" class="divide-y divide-gray-200" id="backupsList">
                                                        <!-- Backups will be loaded here -->
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="flex justify-center">
                          <div id="rebootBanner" class="rounded-3xl hidden fixed bottom-0 m-6 w-1/2 left-1/2 -translate-x-1/2 bg-[#1f2937] text-white shadow-lg transition-all z-50 duration-300 transform translate-y-full">
                            <div class="max-w-7xl mx-auto py-3 px-4 sm:px-6 lg:px-8">
                                <div class="flex items-center justify-between flex-wrap">
                                    <div class="w-0 flex-1 flex items-center">
                                        <p class="ml-3 font-medium truncate">
                                            A reboot is required to apply changes.
                                        </p>
                                    </div>
                                    <div class="flex-shrink-0 sm:ml-3">
                                        <button onclick="rebootDashboard()" class="ml-4 transition rounded-xl bg-black/20 border border-white/10 px-4 py-2 text-sm font-medium text-white hover:bg-black/30">
                                            Reboot Now
                                        </button>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <%- include('../components/footer') %>
        </div>
    </div>

    <script>
        let editor;
        let needsReboot = false;

        // Initialize Monaco Editor
        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.43.0/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            // Register TOML language
            monaco.languages.register({ id: 'toml' });

            // Define TOML syntax highlighting rules
            monaco.languages.setMonarchTokensProvider('toml', {
                tokenizer: {
                    root: [
                        [/^\s*\[(.*)\]/, "type"],
                        [/^\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*=/, "variable"],
                        [/".*?"/, "string"],
                        [/'.*?'/, "string"],
                        [/#.*$/, "comment"],
                        [/\d+(\.\d+)?/, "number"],
                        [/true|false/, "keyword"],
                    ]
                }
            });

            // Create editor instance
            editor = monaco.editor.create(document.getElementById('editor'), {
                theme: 'vs-light',
                language: 'toml',
                automaticLayout: true,
                fontSize: 14,
                minimap: {
                    enabled: true
                },
                scrollBeyondLastLine: false,
                roundedSelection: true,
                padding: { top: 16 }
            });

            // Load initial config
            loadConfig();

            // Start reboot check interval
            setInterval(checkRebootStatus, 30000);

            // Setup save button handler
            document.getElementById('saveButton').addEventListener('click', saveConfig);
        });

        async function loadConfig() {
            try {
                const response = await fetch('/api/config/raw');
                if (!response.ok) throw new Error('Failed to load configuration');
                const config = await response.text(); // Get raw text instead of JSON
                editor.setValue(config);
                showToast('Configuration loaded successfully');
            } catch (error) {
                console.error('Error loading config:', error);
                showToast('Failed to load configuration', 'error');
            }
        }

        async function saveConfig() {
    try {
        const tomlContent = editor.getValue();

        const response = await fetch('/api/config/raw', {
            method: 'POST',
            headers: {
                'Content-Type': 'text/plain'  // Changed from application/json
            },
            body: tomlContent  // Send raw text, don't stringify
        });

        if (!response.ok) throw new Error('Failed to save configuration');

        showToast('Configuration saved successfully');
        checkRebootStatus();
        loadBackups();
    } catch (error) {
        console.error('Error saving config:', error);
        showToast('Failed to save configuration', 'error');
    }
}

        // Backup Management
        async function loadBackups() {
            try {
                const response = await fetch('/api/config/backups');
                if (!response.ok) throw new Error('Failed to load backups');
                const backups = await response.json();

                const backupsList = document.getElementById('backupsList');
                backupsList.innerHTML = backups.map(backup => `
                    <li class="py-4">
                        <div class="flex items-center space-x-4">
                            <div class="min-w-0 flex-1">
                                <p class="truncate text-sm font-medium text-gray-900">Backup from ${new Date(backup.timestamp).toLocaleString()}</p>
                                <p class="truncate text-sm text-gray-500">${backup.name}</p>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="restoreBackup('${backup.name}')" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-gray-600 hover:bg-gray-700">
                                    Restore
                                </button>
<button onclick="viewBackup('${backup.name}')" class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    View
                                </button>
                            </div>
                        </div>
                    </li>
                `).join('');
            } catch (error) {
                console.error('Error loading backups:', error);
                showToast('Failed to load backups', 'error');
            }
        }

        async function restoreBackup(filename) {
            if (!confirm('Are you sure you want to restore this backup? Current configuration will be overwritten.')) {
                return;
            }

            try {
                const response = await fetch(`/api/config/backups/${filename}/restore`, {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Failed to restore backup');

                showToast('Backup restored successfully');
                loadConfig();
                closeBackupsModal();
                checkRebootStatus();
            } catch (error) {
                console.error('Error restoring backup:', error);
                showToast('Failed to restore backup', 'error');
            }
        }

        async function viewBackup(filename) {
            try {
                const response = await fetch(`/api/config/backups/${filename}`);
                if (!response.ok) throw new Error('Failed to load backup');
                const content = await response.text();
                
                editor.setValue(content);
                closeBackupsModal();
                showToast('Backup loaded in editor - Remember to save if you want to keep these changes');
            } catch (error) {
                console.error('Error viewing backup:', error);
                showToast('Failed to load backup', 'error');
            }
        }

        function showBackupsModal() {
            loadBackups();
            document.getElementById('backupsModal').classList.remove('hidden');
        }

        function closeBackupsModal() {
            document.getElementById('backupsModal').classList.add('hidden');
        }

        async function checkRebootStatus() {
            try {
                const response = await fetch('/api/reboot/status');
                const { needsReboot: needs } = await response.json();
                
                const banner = document.getElementById('rebootBanner');
                if (needs) {
                    banner.classList.remove('hidden', 'translate-y-full');
                } else {
                    banner.classList.add('translate-y-full');
                    setTimeout(() => banner.classList.add('hidden'), 300);
                }
                
                needsReboot = needs;
            } catch (error) {
                console.error('Error checking reboot status:', error);
            }
        }

        async function rebootDashboard() {
            if (!confirm('Are you sure you want to reboot the dashboard? All users will be disconnected temporarily.')) {
                return;
            }

            try {
                const response = await fetch('/api/reboot', {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Failed to initiate reboot');

                showToast('Dashboard is rebooting...');
                setTimeout(() => {
                    window.location.reload();
                }, 5000);
            } catch (error) {
                console.error('Error rebooting dashboard:', error);
                showToast('Failed to reboot dashboard', 'error');
            }
        }

        // Helper Functions
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-xl shadow-lg z-50 transform transition-all duration-300 translate-y-full ${
                type === 'success' ? 'bg-emerald-500' : 'bg-red-500'
            } text-white`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => toast.classList.remove('translate-y-full'), 10);
            setTimeout(() => {
                toast.classList.add('translate-y-full');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        checkRebootStatus();
    </script>
</body>
</html>