<head>
  <title><%= settings.name %></title>
  <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
  <link rel="stylesheet" href="../assets/tailwind.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>

  <!-- Inter font -->
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>

<body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
  <%- include('../components/navigation') %>
  <div class="md:pl-48 flex flex-col flex-1 h-screen">
    <main class="flex-1 pb-32">
      <div class="py-6">
        <% /* Skeleton loader, lasts about 0.3s to let the page content load */ %>
        <%- include('../components/skeleton') %>
        <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
          <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
            <div class="min-w-0 flex-1">
              <div class="flex">
                <div class="relative">
                  <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                      <path d="M9.375 3a1.875 1.875 0 0 0 0 3.75h1.875v4.5H3.375A1.875 1.875 0 0 1 1.5 9.375v-.75c0-1.036.84-1.875 1.875-1.875h3.193A3.375 3.375 0 0 1 12 2.753a3.375 3.375 0 0 1 5.432 3.997h3.943c1.035 0 1.875.84 1.875 1.875v.75c0 1.036-.84 1.875-1.875 1.875H12.75v-4.5h1.875a1.875 1.875 0 1 0-1.875-1.875V6.75h-1.5V4.875C11.25 3.839 10.41 3 9.375 3ZM11.25 12.75H3v6.75a2.25 2.25 0 0 0 2.25 2.25h6v-9ZM12.75 12.75v9h6.75a2.25 2.25 0 0 0 2.25-2.25v-6.75h-9Z" />
                    </svg>
                  </div>
                </div>
                <div class="relative ml-4">
                  <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">AFK Page</h2>
                  <p class="text-xs font-thin text-gray-500">You'll automatically get coins for leaving this page open.</p>
                </div>
              </div>
            </div>
          </div>
                <span id="connectionStatus" class="px-3 py-1 mb-4 rounded-full text-sm font-medium tracking-tight bg-zinc-700 text-zinc-300">
                    Connecting...
                </span>
          <p class="text-gray-500 text-sm mt-4">Countdown: <span id="countdown"></span></p>
          <p class="text-gray-500 text-sm">Earning rate: <span id="earningRate">1 coin(s) / min</span></p>
          <p class="text-gray-500 text-sm">Duration: <span id="timeActive">-</span></p><span id="totalEarned" class="hidden">-</span>

          <script>
document.addEventListener('DOMContentLoaded', function() {
    let ws;
    let sessionStart = Date.now();
    let totalEarned = 0;
    let updateInterval;
    let reconnectAttempts = 0;
    const MAX_RECONNECT_ATTEMPTS = 5;
    const RECONNECT_DELAY = 5000;

    function formatTime(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}m ${remainingSeconds}s`;
    }

    function updateSessionStats() {
        const timeActive = Date.now() - sessionStart;
        document.getElementById('timeActive').textContent = formatTime(timeActive);
        document.getElementById('totalEarned').textContent = `${totalEarned.toFixed(2)} coins`;
    }

    function updateConnectionStatus(status, isError = false) {
        const statusElement = document.getElementById('connectionStatus');
        const errorElement = document.getElementById('errorMessage');
        
        if (isError) {
            statusElement.className = 'px-3 py-1 rounded-full text-sm font-medium tracking-tight bg-red-100 text-red-800';
            statusElement.textContent = 'Disconnected';
            errorElement.textContent = status;
            errorElement.classList.remove('hidden');
        } else {
            statusElement.className = status === 'Connected' 
                ? 'px-3 py-1 rounded-full text-sm font-medium tracking-tight bg-[#d6ffcd] text-[#0b9b25]'
                : 'px-3 py-1 rounded-full text-sm font-medium tracking-tight bg-zinc-700 text-zinc-300';
            statusElement.textContent = status;
            errorElement.classList.add('hidden');
        }
    }

    function connect() {
        if (ws) {
            ws.close();
        }

        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        ws = new WebSocket(`${protocol}//${window.location.host}/ws `);

        ws.onopen = () => {
            console.log('[AFK] Connected to server');
            updateConnectionStatus('Connected');
            reconnectAttempts = 0;
            // Start session statistics update
            setInterval(updateSessionStats, 1000);
        };

        ws.onclose = (event) => {
            console.log(`[AFK] Disconnected from server: ${event.code}`);
            
            if (event.code === 4002) {
                updateConnectionStatus('AFK page already open in another tab', true);
            } else if (event.code === 4001) {
                updateConnectionStatus('Session expired. Please refresh the page.', true);
            } else {
                updateConnectionStatus('Disconnected', true);
                
                // Attempt to reconnect
                if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
                    reconnectAttempts++;
                    setTimeout(connect, RECONNECT_DELAY);
                    updateConnectionStatus(`Reconnecting (Attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`);
                } else {
                    updateConnectionStatus('Connection failed. Please refresh the page.', true);
                }
            }
            
            clearInterval(updateInterval);
        };

        ws.onerror = (error) => {
            console.error('[AFK] WebSocket error:', error);
        };

        ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                if (data.type === 'afk_state') {
                    // Update earning rate
                    document.getElementById('earningRate').textContent = 
                        `${data.coinsPerMinute.toFixed(1)} coin(s) / min`;

                    // Update countdown
                    if (updateInterval) clearInterval(updateInterval);
                    
                    function updateCountdown() {
                        const remainingSeconds = Math.ceil(data.nextRewardIn / 1000);
                        document.getElementById('countdown').textContent = 
                            `${remainingSeconds}s`;
                    }

                    updateCountdown();
                    updateInterval = setInterval(updateCountdown, 1000);

                    // Update total earned (add coins every reward)
                    if (data.nextRewardIn === 0) {
                        totalEarned += data.coinsPerMinute;
                        updateSessionStats();
                    }
                }
            } catch (error) {
                console.error('[AFK] Failed to parse message:', error);
            }
        };
    }

    // Start connection when page loads
    connect();

    // Handle page visibility changes
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            console.log('[AFK] Page hidden');
        } else {
            console.log('[AFK] Page visible, checking connection');
            if (!ws || ws.readyState !== WebSocket.OPEN) {
                connect();
            }
        }
    });
});
          </script>
        </div>
      </div>
    </main>
    <%- include('../components/footer') %>
  </div>
  </div>
</body>