<div id="searchModal" class="modal">
  <div class="modal-content bg-white">
    <div class="flex justify-between items-center mb-6">
      <div class="flex items-center">
        <div class="bg-gray-100 rounded-2xl h-11 w-11 flex items-center justify-center text-gray-400">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
          </svg>              
        </div>
        <div class="ml-4">
          <h2 class="text-xl font-medium text-gray-700 sm:truncate tracking-tight">Search</h2>
          <p class="text-xs font-thin text-gray-500">Press ↑↓ to navigate, Enter to select</p>
        </div>
      </div>
      <button id="closeSearch" class="text-gray-400 hover:text-gray-600 transition">
        <span class="text-xs mr-2">ESC</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <div class="relative">
      <input 
        type="text" 
        id="searchInput" 
        class="w-full px-6 py-3 bg-white border-none shadow-sm text-sm font-medium tracking-tight text-gray-700 rounded-2xl focus:outline-none focus:ring-1 focus:ring-gray-200 transition" 
        placeholder="Type to search..." 
        autocomplete="off"
      />
      <div class="absolute right-3 top-2.5 flex items-center space-x-2 text-xs text-gray-400">
        <kbd class="px-2 py-1 bg-gray-100 rounded-lg">/</kbd>
      </div>
    </div>
    <div id="searchResults" class="mt-4 space-y-1 max-h-96 overflow-y-auto"></div>
  </div>
</div>

<script>
const searchModal = document.getElementById('searchModal');
let modalContent; // Declare it in the outer scope

document.addEventListener('DOMContentLoaded', () => {
    modalContent = document.querySelector('.modal-content') || document.querySelector('.modal-content-dark');
});
const searchInput = document.getElementById('searchInput');
const searchResults = document.getElementById('searchResults');
const closeButton = document.getElementById('closeSearch');
const navLinks = document.querySelectorAll('.nav-link');

let currentIndex = -1;
let filteredLinks = [];

// Function to open search modal
function openSearchModal() {
  searchModal.classList.add('show');
  setTimeout(() => {
    modalContent.classList.add('visible');
    searchInput.focus();
  }, 50);
}

// Function to close search modal
function closeSearchModal() {
  modalContent.classList.remove('visible');
  setTimeout(() => {
    searchModal.classList.remove('show');
    searchInput.value = '';
    searchResults.innerHTML = '';
    currentIndex = -1;
  }, 300);
}

// Function to update selected result
function updateSelectedResult() {
  document.querySelectorAll('.search-result').forEach((result, index) => {
    if (index === currentIndex) {
      result.classList.add('bg-gray-200', 'text-gray-900');
      result.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
    } else {
      result.classList.remove('bg-gray-200', 'text-gray-900');
    }
  });
}

// Function to render search results
function renderSearchResults(searchTerm) {
  searchResults.innerHTML = '';
  filteredLinks = Array.from(navLinks).filter(link => 
    link.textContent.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (filteredLinks.length === 0) {
    searchResults.innerHTML = `
      <div class="flex flex-col items-center justify-center py-8 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8 text-gray-300 mb-2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z" />
        </svg>
        <p class="text-gray-400 text-sm">No results found for "${searchTerm}"</p>
      </div>
    `;
    return;
  }

  filteredLinks.forEach((link, index) => {
    const resultDiv = document.createElement('div');
    resultDiv.className = 'search-result transition cursor-pointer px-4 py-3 rounded-xl hover:bg-gray-100';
    
    // Highlight matching text
    const text = link.textContent;
    const regex = new RegExp(`(${searchTerm})`, 'gi');
    const highlightedText = text.replace(regex, '<mark class="bg-yellow-200">$1</mark>');
    
    resultDiv.innerHTML = `
      <div class="flex items-center justify-between">
        <span class="font-medium text-gray-700">${highlightedText}</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-gray-400">
          <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
        </svg>
      </div>
    `;
    
    resultDiv.addEventListener('click', () => {
      window.location.href = link.href;
    });
    
    searchResults.appendChild(resultDiv);
  });
  
  currentIndex = -1;
}

// Event Listeners
document.addEventListener('keydown', (event) => {
  if (event.key === '/' && !searchModal.classList.contains('show')) {
    event.preventDefault();
    openSearchModal();
  } else if (event.key === 'Escape') {
    closeSearchModal();
  }
});

searchInput.addEventListener('input', () => {
  renderSearchResults(searchInput.value);
});

searchInput.addEventListener('keydown', (event) => {
  const results = document.querySelectorAll('.search-result');
  
  switch(event.key) {
    case 'ArrowDown':
      event.preventDefault();
      currentIndex = (currentIndex + 1) % results.length;
      updateSelectedResult();
      break;
    
    case 'ArrowUp':
      event.preventDefault();
      currentIndex = currentIndex <= 0 ? results.length - 1 : currentIndex - 1;
      updateSelectedResult();
      break;
    
    case 'Enter':
      event.preventDefault();
      if (currentIndex >= 0 && currentIndex < filteredLinks.length) {
        window.location.href = filteredLinks[currentIndex].href;
      }
      break;
  }
});

closeButton.addEventListener('click', closeSearchModal);

searchModal.addEventListener('click', (event) => {
  if (event.target === searchModal) {
    closeSearchModal();
  }
});

// Mini search integration
const miniSearchInput = document.getElementById('miniSearchInput');
const miniSearchButton = document.getElementById('miniSearchButton');

miniSearchInput?.addEventListener('keydown', (event) => {
  if (event.key === 'Enter') {
    event.preventDefault();
    const searchTerm = miniSearchInput.value.trim();
    if (searchTerm) {
      openSearchModal();
      searchInput.value = searchTerm;
      renderSearchResults(searchTerm);
    }
  }
});

miniSearchButton?.addEventListener('click', () => {
  openSearchModal();
  if (miniSearchInput?.value) {
    searchInput.value = miniSearchInput.value;
    renderSearchResults(miniSearchInput.value);
  }
});
</script>