<head>
    <title><%= settings.name %></title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
    <link rel="stylesheet" href="../assets/tailwind.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  
  <body class="bg-gray-100" style="font-family: 'Inter', sans-serif;">
    <div>
      <%- include('../components/navigation') %>
      <div class="md:pl-48 flex flex-col flex-1 h-screen">
        <main class="flex-1 pb-32">
          <div class="py-6">
            <%- include('../components/skeleton') %>
            <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
              <!-- Header -->
              <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
                <div class="min-w-0 flex-1">
                  <div class="flex">
                    <div class="relative">
                      <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                          <path fill-rule="evenodd" d="M4.848 2.771A49.144 49.144 0 0112 2.25c2.43 0 4.817.178 7.152.52 1.978.292 3.348 2.024 3.348 3.97v6.02c0 1.946-1.37 3.678-3.348 3.97a48.901 48.901 0 01-3.476.383.39.39 0 00-.297.17l-2.755 4.133a.75.75 0 01-1.248 0l-2.755-4.133a.39.39 0 00-.297-.17 48.9 48.9 0 01-3.476-.384c-1.978-.29-3.348-2.024-3.348-3.97V6.741c0-1.946 1.37-3.68 3.348-3.97z" />
                        </svg>
                      </div>
                    </div>
                    <div class="relative ml-4">
                      <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Support</h2>
                      <p class="text-xs font-thin text-gray-500">Get help with your account, servers, or general inquiries.</p>
                    </div>
                  </div>
                </div>
                <div class="mt-5 flex lg:ml-4 lg:mt-0">
                  <span class="sm:ml-3">
                    <button onclick="showCreateTicketModal()" class="transition rounded-2xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-8 py-2 text-sm font-medium text-white hover:bg-[#000000]/80">
                      New Ticket
                    </button>
                  </span>
                </div>
              </div>
  
              <!-- Stats Overview -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <div class="py-8 px-10 bg-white rounded-lg shadow-sm overflow-hidden">
                  <dt class="text-sm font-medium text-gray-500 truncate">Total Tickets</dt>
                  <dd class="mt-1 text-3xl font-thin tracking-tight text-gray-900" id="totalTickets">-</dd>
                </div>
                <div class="py-8 px-10 bg-white rounded-lg shadow-sm overflow-hidden">
                  <dt class="text-sm font-medium text-gray-500 truncate">Active Tickets</dt>
                  <dd class="mt-1 text-3xl font-thin tracking-tight text-emerald-600" id="activeTickets">-</dd>
                </div>
                <div class="py-8 px-10 bg-white rounded-lg shadow-sm overflow-hidden">
                  <dt class="text-sm font-medium text-gray-500 truncate">Response Time</dt>
                  <dd class="mt-1 text-3xl font-thin tracking-tight text-blue-600" id="avgResponseTime">-</dd>
                </div>
              </div>
  
              <!-- Active Tickets -->
              <div class="bg-white rounded-lg shadow-sm overflow-hidden">
                <div class="p-6 border-b border-gray-200">
                  <h3 class="text-lg font-semibold text-gray-700">Active Tickets</h3>
                </div>
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Update</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      </tr>
                    </thead>
                    <tbody id="activeTicketsTable" class="bg-white divide-y divide-gray-200">
                      <!-- Tickets will be loaded here -->
                    </tbody>
                  </table>
                </div>
                <div id="noActiveTickets" class="hidden p-8 text-center">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mx-auto h-12 w-12 text-gray-400">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25zM6.75 12h.008v.008H6.75V12zm0 3h.008v.008H6.75V15zm0 3h.008v.008H6.75V18z" />
                  </svg>
                  <h3 class="mt-4 text-sm font-medium text-gray-900">No active tickets</h3>
                  <p class="mt-1 text-sm text-gray-500">Create a new ticket if you need assistance.</p>
                  <div class="mt-6">
                    <button onclick="showCreateTicketModal()" class="transition inline-flex items-center rounded-xl bg-gray-200 px-8 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                      <svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                      </svg>
                      New Ticket
                    </button>
                  </div>
                </div>
              </div>
  
              <!-- Closed Tickets -->
              <div class="mt-8 bg-white rounded-lg shadow-sm overflow-hidden">
                <div class="p-6 border-b border-gray-200">
                  <h3 class="text-lg font-semibold text-gray-700">Closed Tickets</h3>
                </div>
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Closed Date</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody id="closedTicketsTable" class="bg-white divide-y divide-gray-200">
                      <!-- Closed tickets will be loaded here -->
                    </tbody>
                  </table>
                </div>
                <div id="noClosedTickets" class="hidden p-8 text-center">
                  <p class="text-sm text-gray-500">No closed tickets found.</p>
                </div>
              </div>
  
              <script>
                let tickets = [];
  
                document.addEventListener('DOMContentLoaded', async () => {
                  await loadTickets();
                  await loadStats();
                  document.getElementById('content').classList.remove('hidden');
                });
  
                async function loadStats() {
                  try {
                    const response = await fetch('/api/tickets/count');
                    const counts = await response.json();
                    
                    document.getElementById('totalTickets').textContent = counts.total;
                    document.getElementById('activeTickets').textContent = counts.open;
                    document.getElementById('avgResponseTime').textContent = '< 24h';
                  } catch (error) {
                    console.error('Error loading stats:', error);
                    showToast('Failed to load ticket statistics', 'error');
                  }
                }
  
                async function loadTickets() {
                  try {
                    const response = await fetch('/api/tickets');
                    tickets = await response.json();
                    
                    const activeTickets = tickets.filter(t => t.status === 'open');
                    const closedTickets = tickets.filter(t => t.status === 'closed');
  
                    // Update active tickets table
                    const activeTable = document.getElementById('activeTicketsTable');
                    const noActiveTickets = document.getElementById('noActiveTickets');
                    
                    if (activeTickets.length === 0) {
                      activeTable.closest('.overflow-x-auto').classList.add('hidden');
                      noActiveTickets.classList.remove('hidden');
                    } else {
                      activeTable.closest('.overflow-x-auto').classList.remove('hidden');
                      noActiveTickets.classList.add('hidden');
                      activeTable.innerHTML = activeTickets.map(ticket => `
                        <tr class="hover:bg-gray-50 cursor-pointer" onclick="viewTicket('${ticket.id}')">
                          <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                              <div>
                                <div class="text-sm font-medium text-gray-900">${ticket.subject}</div>
                                <div class="text-xs text-gray-500">#${ticket.id.slice(0, 8)}</div>
                              </div>
                            </div>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
                              ${ticket.category}
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex items-center rounded-md ${getPriorityClasses(ticket.priority)}">
                              ${ticket.priority}
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${timeAgo(ticket.updated)}
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-center">
                            <span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
                              ${ticket.status}
                            </span>
                          </td>
                        </tr>
                      `).join('');
                    }
  
                    // Update closed tickets table
                    const closedTable = document.getElementById('closedTicketsTable');
                    const noClosedTickets = document.getElementById('noClosedTickets');
                    
                    if (closedTickets.length === 0) {
                      closedTable.closest('.overflow-x-auto').classList.add('hidden');
                      noClosedTickets.classList.remove('hidden');
                    } else {
                    closedTable.closest('.overflow-x-auto').classList.remove('hidden');
                    noClosedTickets.classList.add('hidden');
                    closedTable.innerHTML = closedTickets.map(ticket => `
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="flex items-center">
                            <div>
                              <div class="text-sm font-medium text-gray-900">${ticket.subject}</div>
                              <div class="text-xs text-gray-500">#${ticket.id.slice(0, 8)}</div>
                            </div>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
                            ${ticket.category}
                          </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="inline-flex items-center rounded-md ${getPriorityClasses(ticket.priority)}">
                            ${ticket.priority}
                          </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          ${formatDate(ticket.updated)}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-center">
                          <button onclick="viewTicket('${ticket.id}')" class="text-gray-600 hover:text-gray-900 mx-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10 12.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z" />
                              <path fill-rule="evenodd" d="M.664 10.59a1.651 1.651 0 010-1.186A10.004 10.004 0 0110 3c4.257 0 7.893 2.66 9.336 6.41.147.381.146.804 0 1.186A10.004 10.004 0 0110 17c-4.257 0-7.893-2.66-9.336-6.41zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                            </svg>
                          </button>
                        </td>
                      </tr>
                    `).join('');
                  }
                } catch (error) {
                  console.error('Error loading tickets:', error);
                  showToast('Failed to load tickets', 'error');
                }
              }

              function showCreateTicketModal() {
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                modal.innerHTML = `
                  <div class="relative top-20 mx-auto p-5 w-full max-w-xl opacity-0 transform -translate-y-4 transition-all duration-300">
                    <div class="relative bg-white rounded-2xl shadow-xl p-8">
                      <h2 class="text-xl font-semibold text-gray-700 mb-6">Create Ticket</h2>
                      <form id="createTicketForm" class="space-y-6">
                        <div>
                          <label for="subject" class="text-sm font-medium text-gray-600">Subject</label>
                          <input type="text" id="subject" name="subject" class="mt-2 px-4 py-2 w-full focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition rounded-xl" required>
                        </div>
                        
                        <div>
                          <label for="category" class="text-sm font-medium text-gray-600">Category</label>
                          <select id="category" name="category" class="mt-2 px-4 py-2 w-full focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition rounded-xl">
                            <option value="technical">Technical Support</option>
                            <option value="billing">Billing</option>
                            <option value="general">General Inquiry</option>
                            <option value="abuse">Abuse Report</option>
                          </select>
                        </div>
                        
                        <div>
                          <label for="priority" class="text-sm font-medium text-gray-600">Priority</label>
                          <select id="priority" name="priority" class="mt-2 px-4 py-2 w-full focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition rounded-xl">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                          </select>
                        </div>
                        
                        <div>
                          <label for="description" class="text-sm font-medium text-gray-600">Description</label>
                          <textarea id="description" name="description" rows="4" class="mt-2 px-4 py-2 w-full focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition rounded-xl" required></textarea>
                        </div>

                        <div class="flex justify-end space-x-3">
                          <button type="button" onclick="window.location.reload()" class="transition rounded-xl bg-gray-200 px-6 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300">
                            Cancel
                          </button>
                          <button type="submit" class="transition rounded-xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-6 py-2 text-sm font-medium text-white hover:bg-[#000000]/80">
                            Create Ticket
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                `;

                document.body.appendChild(modal);
                setTimeout(() => {
                  modal.querySelector('div').classList.remove('opacity-0', '-translate-y-4');
                }, 10);

                modal.addEventListener('click', (e) => {
                  if (e.target === modal) {
                    window.location.reload();
                  }
                });

                const form = modal.querySelector('#createTicketForm');
                form.addEventListener('submit', async (e) => {
                  e.preventDefault();
                  
                  try {
                    const response = await fetch('/api/tickets', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        subject: form.subject.value,
                        category: form.category.value,
                        priority: form.priority.value,
                        description: form.description.value
                      })
                    });

                    if (!response.ok) throw new Error('Failed to create ticket');

                    await loadTickets();
                    await loadStats();
                    window.location.reload();
                    showToast('Ticket created successfully', 'success');
                  } catch (error) {
                    console.error('Error creating ticket:', error);
                    showToast('Failed to create ticket', 'error');
                  }
                });
              }

              async function viewTicket(ticketId) {
                try {
                  const response = await fetch(`/api/tickets/${ticketId}`);
                  const ticket = await response.json();

                  const modal = document.createElement('div');
                  modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                  modal.innerHTML = `
                    <div class="relative top-20 mx-auto p-5 w-full max-w-2xl opacity-0 transform -translate-y-4 transition-all duration-300">
                      <div class="relative bg-white rounded-2xl shadow-xl p-8">
                        <div class="flex justify-between items-start">
                          <div>
                            <h2 class="text-xl font-semibold text-gray-700">${ticket.subject}</h2>
                            <p class="text-sm text-gray-500 mt-1">Ticket #${ticket.id.slice(0, 8)}</p>
                          </div>
                          <span class="inline-flex items-center rounded-md ${getPriorityClasses(ticket.priority)}">
                            ${ticket.priority}
                          </span>
                        </div>

                        <div class="mt-6 space-y-4 max-h-96 overflow-y-auto">
                          ${ticket.messages.map(msg => `
                            <div class="bg-gray-50 rounded-xl p-4 ${msg.isStaff ? 'ml-8' : 'mr-8'}">
                              <div class="flex justify-between items-start">
                                <span class="inline-flex items-center">
                                  ${msg.isStaff ? 
                                    '<span class="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 mr-2">Staff</span>' : 
                                    '<span class="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800 mr-2">You</span>'
                                  }
                                  <span class="text-xs text-gray-400">${timeAgo(msg.timestamp)}</span>
                                </span>
                              </div>
                              <p class="text-sm text-gray-700 mt-2">${msg.content}</p>
                            </div>
                          `).join('')}
                        </div>

                        ${ticket.status === 'open' ? `
                          <div class="mt-6 border-t border-gray-200 pt-6">
                            <form id="replyForm" class="space-y-4">
                              <div>
                                <label for="replyContent" class="text-sm font-medium text-gray-600">Reply</label>
                                <textarea id="replyContent" name="content" rows="3" class="mt-2 px-4 py-2 w-full focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition rounded-xl" required></textarea>
                              </div>
                              <div class="flex justify-end space-x-3">
                                <button type="button" onclick="closeTicket('${ticket.id}')" class="transition rounded-xl bg-amber-500 px-6 py-2 text-sm font-medium text-white hover:bg-amber-600">
                                  Close Ticket
                                </button>
                                <button type="submit" class="transition rounded-xl inline-flex items-center border border-[#000000]/50 bg-[#000000] px-6 py-2 text-sm font-medium text-white hover:bg-[#000000]/80">
                                  Send Reply
                                </button>
                              </div>
                            </form>
                          </div>
                        ` : `
                          <div class="mt-6 flex justify-end">
                            <button onclick="reopenTicket('${ticket.id}')" class="transition rounded-xl bg-emerald-500 px-6 py-2 text-sm font-medium text-white hover:bg-emerald-600">
                              Reopen Ticket
                            </button>
                          </div>
                        `}
                      </div>
                    </div>
                  `;

                  document.body.appendChild(modal);
                  setTimeout(() => {
                    modal.querySelector('div').classList.remove('opacity-0', '-translate-y-4');
                  }, 10);

                  modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                      window.location.reload();
                    }
                  });

                  const form = modal.querySelector('#replyForm');
                  if (form) {
                    form.addEventListener('submit', async (e) => {
                      e.preventDefault();
                      
                      try {
                        const response = await fetch(`/api/tickets/${ticketId}/messages`, {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                            content: form.content.value
                          })
                        });

                        if (!response.ok) throw new Error('Failed to send reply');

                        form.reset();
                        await viewTicket(ticketId); // Refresh the modal
                        showToast('Reply sent successfully', 'success');
                      } catch (error) {
                        console.error('Error sending reply:', error);
                        showToast('Failed to send reply', 'error');
                      }
                    });
                  }
                } catch (error) {
                  console.error('Error viewing ticket:', error);
                  showToast('Failed to load ticket details', 'error');
                }
              }

              async function closeTicket(ticketId) {
                if (!confirm('Are you sure you want to close this ticket?')) return;

                try {
                  const response = await fetch(`/api/tickets/${ticketId}/status`, {
                    method: 'PATCH',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: 'closed' })
                  });

                  if (!response.ok) throw new Error('Failed to close ticket');

                  closeAllModals();
                  await loadTickets();
                  await loadStats();
                  showToast('Ticket closed successfully', 'success');
                } catch (error) {
                  console.error('Error closing ticket:', error);
                  showToast('Failed to close ticket', 'error');
                }
              }

              async function reopenTicket(ticketId) {
                try {
                  const response = await fetch(`/api/tickets/${ticketId}/status`, {
                    method: 'PATCH',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: 'open' })
                  });

                  if (!response.ok) throw new Error('Failed to reopen ticket');

                  closeAllModals();
                  await loadTickets();
                  await loadStats();
                  showToast('Ticket reopened successfully', 'success');
                } catch (error) {
                  console.error('Error reopening ticket:', error);
                  showToast('Failed to reopen ticket', 'error');
                }
              }

              function getPriorityClasses(priority) {
                const classes = {
                  low: 'bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10',
                  medium: 'bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-700 ring-1 ring-inset ring-yellow-700/10',
                  high: 'bg-orange-50 px-2 py-1 text-xs font-medium text-orange-700 ring-1 ring-inset ring-orange-700/10',
                  urgent: 'bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-700/10'
                };
                return classes[priority] || classes.low;
              }

              function formatDate(timestamp) {
                return new Date(timestamp).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                });
              }

              function timeAgo(timestamp) {
                const seconds = Math.floor((Date.now() - timestamp) / 1000);

                const intervals = {
                  year: 31536000,
                  month: 2592000,
                  week: 604800,
                  day: 86400,
                  hour: 3600,
                  minute: 60
                };

                for (const [unit, secondsInUnit] of Object.entries(intervals)) {
                  const interval = Math.floor(seconds / secondsInUnit);
                  if (interval >= 1) {
                    return interval === 1 ? `1 ${unit} ago` : `${interval} ${unit}s ago`;
                  }
                }

                return 'just now';
              }

              function closeModal(modal) {
                const modalContent = modal.querySelector('div');
                modalContent.classList.add('opacity-0', '-translate-y-4');
                setTimeout(() => {
                  modal.remove();
                }, 300);
              }

              function closeAllModals() {
                document.querySelectorAll('.fixed').forEach(modal => {
                  window.location.reload();
                });
              }

              function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-xl shadow-lg z-50 transform transition-all duration-300 translate-y-full ${
                  type === 'success' ? 'bg-emerald-500' : 'bg-red-500'
                } text-white`;
                toast.textContent = message;
                document.body.appendChild(toast);

                setTimeout(() => {
                  toast.classList.remove('translate-y-full');
                }, 10);

                setTimeout(() => {
                  toast.classList.add('translate-y-full');
                  setTimeout(() => toast.remove(), 300);
                }, 3000);
              }
            </script>
          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>
</body>